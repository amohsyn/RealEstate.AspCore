// <auto-generated />
using System;
using GeoAPI.Geometries;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RealEstate.Services.Database;

namespace RealEstate.Web.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Applicant", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("CustomerId")
                        .IsRequired();

                    b.Property<string>("Description");

                    b.Property<string>("ItemId");

                    b.Property<int>("Type");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ItemId");

                    b.HasIndex("UserId");

                    b.ToTable("Applicant");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.ApplicantFeature", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicantId")
                        .IsRequired();

                    b.Property<string>("Audit");

                    b.Property<string>("FeatureId")
                        .IsRequired();

                    b.Property<string>("Value")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("FeatureId");

                    b.ToTable("ApplicantFeature");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Beneficiary", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<int>("CommissionPercent");

                    b.Property<string>("DealId")
                        .IsRequired();

                    b.Property<int>("TipPercent");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("DealId");

                    b.HasIndex("UserId");

                    b.ToTable("Beneficiary");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Category", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Customer", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("Audit");

                    b.Property<string>("MobileNumber")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("PhoneNumber");

                    b.HasKey("Id");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Deal", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("Barcode");

                    b.Property<decimal>("CommissionPrice");

                    b.Property<string>("Description");

                    b.Property<decimal>("TipPrice");

                    b.HasKey("Id");

                    b.ToTable("Deal");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.DealRequest", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("DealId");

                    b.Property<string>("ItemId")
                        .IsRequired();

                    b.Property<string>("SmsId");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DealId")
                        .IsUnique()
                        .HasFilter("[DealId] IS NOT NULL");

                    b.HasIndex("ItemId");

                    b.HasIndex("SmsId");

                    b.ToTable("DealRequest");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.District", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("District");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Division", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Division");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Employee", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("Audit");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("Mobile")
                        .IsRequired();

                    b.Property<string>("Phone");

                    b.HasKey("Id");

                    b.HasIndex("Mobile")
                        .IsUnique();

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.EmployeeDivision", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("DivisionId")
                        .IsRequired();

                    b.Property<string>("EmployeeId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("DivisionId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeDivision");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.EmployeeStatus", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("EmployeeId")
                        .IsRequired();

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeStatus");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Facility", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Facility");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Feature", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("Feature");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.FixedSalary", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("EmployeeId")
                        .IsRequired();

                    b.Property<double>("Value");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("FixedSalary");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Insurance", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("EmployeeId")
                        .IsRequired();

                    b.Property<double>("Price");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Insurance");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Item", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("CategoryId")
                        .IsRequired();

                    b.Property<string>("Description");

                    b.Property<string>("PropertyId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PropertyId");

                    b.ToTable("Item");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.ItemFeature", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("FeatureId")
                        .IsRequired();

                    b.Property<string>("ItemId")
                        .IsRequired();

                    b.Property<string>("Value")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("FeatureId");

                    b.HasIndex("ItemId");

                    b.ToTable("ItemFeature");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Leave", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("EmployeeId")
                        .IsRequired();

                    b.Property<DateTime>("From");

                    b.Property<string>("Reason");

                    b.Property<DateTime>("To");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Leave");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.ManagementPercent", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("EmployeeId")
                        .IsRequired();

                    b.Property<int>("Percent");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("ManagementPercent");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Ownership", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("CustomerId")
                        .IsRequired();

                    b.Property<string>("Description");

                    b.Property<int>("Dong");

                    b.Property<string>("PropertyOwnershipId");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PropertyOwnershipId");

                    b.ToTable("Ownership");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Payment", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("CheckoutId");

                    b.Property<string>("EmployeeId")
                        .IsRequired();

                    b.Property<string>("SmsId");

                    b.Property<string>("Text");

                    b.Property<int>("Type");

                    b.Property<double>("Value");

                    b.HasKey("Id");

                    b.HasIndex("CheckoutId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("SmsId");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Picture", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("DealId");

                    b.Property<string>("EmployeeId");

                    b.Property<string>("File")
                        .IsRequired();

                    b.Property<string>("PaymentId");

                    b.Property<string>("PropertyId");

                    b.Property<string>("ReminderId");

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.HasIndex("DealId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("PropertyId");

                    b.HasIndex("ReminderId");

                    b.ToTable("Picture");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Presence", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<DateTime>("Date");

                    b.Property<string>("EmployeeId")
                        .IsRequired();

                    b.Property<int>("Hour");

                    b.Property<int>("Minute");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Presence");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Property", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Alley");

                    b.Property<string>("Audit");

                    b.Property<string>("BuildingName");

                    b.Property<string>("CategoryId");

                    b.Property<string>("Description");

                    b.Property<string>("DistrictId")
                        .IsRequired();

                    b.Property<int>("Flat");

                    b.Property<int>("Floor");

                    b.Property<IPoint>("Geolocation");

                    b.Property<string>("Number");

                    b.Property<string>("Street")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DistrictId");

                    b.ToTable("Property");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.PropertyFacility", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("FacilityId")
                        .IsRequired();

                    b.Property<string>("PropertyId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("FacilityId");

                    b.HasIndex("PropertyId");

                    b.ToTable("PropertyFacility");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.PropertyFeature", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("FeatureId")
                        .IsRequired();

                    b.Property<string>("PropertyId")
                        .IsRequired();

                    b.Property<string>("Value")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("FeatureId");

                    b.HasIndex("PropertyId");

                    b.ToTable("PropertyFeature");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.PropertyOwnership", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("PropertyId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("PropertyOwnership");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Reminder", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("CheckBank");

                    b.Property<string>("CheckNumber");

                    b.Property<DateTime>("Date");

                    b.Property<string>("DealId");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<decimal>("Price");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("DealId");

                    b.HasIndex("UserId");

                    b.ToTable("Reminder");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Sms", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<int>("Provider");

                    b.Property<string>("Receiver");

                    b.Property<string>("ReferenceId");

                    b.Property<string>("Sender");

                    b.Property<string>("StatusJson");

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.ToTable("Sms");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("EmployeeId")
                        .IsRequired();

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<int>("Role");

                    b.Property<string>("Username")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("User");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.UserItemCategory", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("CategoryId")
                        .IsRequired();

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("UserItemCategory");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.UserPropertyCategory", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("CategoryId")
                        .IsRequired();

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPropertyCategory");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Applicant", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Customer", "Customer")
                        .WithMany("Applicants")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RealEstate.Services.Database.Tables.Item", "Item")
                        .WithMany("Applicants")
                        .HasForeignKey("ItemId");

                    b.HasOne("RealEstate.Services.Database.Tables.User", "User")
                        .WithMany("Applicants")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.ApplicantFeature", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Applicant", "Applicant")
                        .WithMany("ApplicantFeatures")
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RealEstate.Services.Database.Tables.Feature", "Feature")
                        .WithMany("ApplicantFeatures")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Beneficiary", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Deal", "Deal")
                        .WithMany("Beneficiaries")
                        .HasForeignKey("DealId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RealEstate.Services.Database.Tables.User", "User")
                        .WithMany("Beneficiaries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.DealRequest", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Deal", "Deal")
                        .WithOne("DealRequest")
                        .HasForeignKey("RealEstate.Services.Database.Tables.DealRequest", "DealId");

                    b.HasOne("RealEstate.Services.Database.Tables.Item", "Item")
                        .WithMany("DealRequests")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RealEstate.Services.Database.Tables.Sms", "Sms")
                        .WithMany("DealRequests")
                        .HasForeignKey("SmsId");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.EmployeeDivision", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Division", "Division")
                        .WithMany("EmployeeDivisions")
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RealEstate.Services.Database.Tables.Employee", "Employee")
                        .WithMany("EmployeeDivisions")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.EmployeeStatus", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Employee", "Employee")
                        .WithMany("EmployeeStatuses")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.FixedSalary", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Employee", "Employee")
                        .WithMany("FixedSalaries")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Insurance", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Employee", "Employee")
                        .WithMany("Insurances")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Item", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Category", "Category")
                        .WithMany("Items")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RealEstate.Services.Database.Tables.Property", "Property")
                        .WithMany("Items")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.ItemFeature", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Feature", "Feature")
                        .WithMany("ItemFeatures")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RealEstate.Services.Database.Tables.Item", "Item")
                        .WithMany("ItemFeatures")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Leave", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Employee", "Employee")
                        .WithMany("Leaves")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.ManagementPercent", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Employee", "Employee")
                        .WithMany("ManagementPercents")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Ownership", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Customer", "Customer")
                        .WithMany("Ownerships")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RealEstate.Services.Database.Tables.PropertyOwnership", "PropertyOwnership")
                        .WithMany("Ownerships")
                        .HasForeignKey("PropertyOwnershipId");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Payment", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Payment", "Checkout")
                        .WithMany("Payments")
                        .HasForeignKey("CheckoutId");

                    b.HasOne("RealEstate.Services.Database.Tables.Employee", "Employee")
                        .WithMany("Payments")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RealEstate.Services.Database.Tables.Sms", "Sms")
                        .WithMany("Payments")
                        .HasForeignKey("SmsId");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Picture", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Deal", "Deal")
                        .WithMany("Pictures")
                        .HasForeignKey("DealId");

                    b.HasOne("RealEstate.Services.Database.Tables.Employee", "Employee")
                        .WithMany("Pictures")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("RealEstate.Services.Database.Tables.Payment", "Payment")
                        .WithMany("Pictures")
                        .HasForeignKey("PaymentId");

                    b.HasOne("RealEstate.Services.Database.Tables.Property", "Property")
                        .WithMany("Pictures")
                        .HasForeignKey("PropertyId");

                    b.HasOne("RealEstate.Services.Database.Tables.Reminder", "Reminder")
                        .WithMany("Pictures")
                        .HasForeignKey("ReminderId");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Presence", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Employee", "Employee")
                        .WithMany("Presences")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Property", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Category", "Category")
                        .WithMany("Properties")
                        .HasForeignKey("CategoryId");

                    b.HasOne("RealEstate.Services.Database.Tables.District", "District")
                        .WithMany("Properties")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.PropertyFacility", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Facility", "Facility")
                        .WithMany("PropertyFacilities")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RealEstate.Services.Database.Tables.Property", "Property")
                        .WithMany("PropertyFacilities")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.PropertyFeature", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Feature", "Feature")
                        .WithMany("PropertyFeatures")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RealEstate.Services.Database.Tables.Property", "Property")
                        .WithMany("PropertyFeatures")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.PropertyOwnership", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Property", "Property")
                        .WithMany("PropertyOwnerships")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Reminder", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Deal", "Deal")
                        .WithMany("Reminders")
                        .HasForeignKey("DealId");

                    b.HasOne("RealEstate.Services.Database.Tables.User", "User")
                        .WithMany("Reminders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.User", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Employee", "Employee")
                        .WithMany("Users")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.UserItemCategory", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Category", "Category")
                        .WithMany("UserItemCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RealEstate.Services.Database.Tables.User", "User")
                        .WithMany("UserItemCategories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.UserPropertyCategory", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Category", "Category")
                        .WithMany("UserPropertyCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RealEstate.Services.Database.Tables.User", "User")
                        .WithMany("UserPropertyCategories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
