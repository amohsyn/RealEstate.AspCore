// <auto-generated />
using System;
using GeoAPI.Geometries;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RealEstate.Services.Database;

namespace RealEstate.Web.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Applicant", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("CustomerId")
                        .IsRequired();

                    b.Property<string>("Description");

                    b.Property<string>("ItemId");

                    b.Property<int>("Type");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ItemId");

                    b.HasIndex("UserId");

                    b.ToTable("Applicant");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.ApplicantFeature", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicantId")
                        .IsRequired();

                    b.Property<string>("Audit");

                    b.Property<string>("FeatureId")
                        .IsRequired();

                    b.Property<string>("Value")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("FeatureId");

                    b.ToTable("ApplicantFeature");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Beneficiary", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<int>("CommissionPercent");

                    b.Property<string>("DealId")
                        .IsRequired();

                    b.Property<int>("TipPercent");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("DealId");

                    b.HasIndex("UserId");

                    b.ToTable("Beneficiary");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Category", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = "8b8c5e5b-2baf-4132-9d15-6d9393ef3504",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-23T19:58:07.7504351+04:30\",\"t\":0}]",
                            Name = "خرید و فروش",
                            Type = 0
                        },
                        new
                        {
                            Id = "b0adb618-233f-44d3-b2a3-9bb32c6111cd",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-23T19:58:07.7504351+04:30\",\"t\":0}]",
                            Name = "زمین",
                            Type = 1
                        },
                        new
                        {
                            Id = "460a79cd-a5be-4dea-957c-ba0ab972acdd",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-23T19:58:07.7504351+04:30\",\"t\":0}]",
                            Name = "ویلایی",
                            Type = 1
                        },
                        new
                        {
                            Id = "279532ad-5486-4177-baae-c672020679bd",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-23T19:58:07.7504351+04:30\",\"t\":0}]",
                            Name = "مشارکت در ساخت",
                            Type = 0
                        },
                        new
                        {
                            Id = "5e4de8fc-2d15-4e3a-bede-f10906c6e7c8",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-23T19:58:07.7504351+04:30\",\"t\":0}]",
                            Name = "رهن و اجاره",
                            Type = 0
                        },
                        new
                        {
                            Id = "cd290ddd-23f9-4cf0-855e-f0b0c66cf1d9",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-23T19:58:07.7504351+04:30\",\"t\":0}]",
                            Name = "رهن کامل",
                            Type = 0
                        },
                        new
                        {
                            Id = "99b4c960-b944-460d-9e8b-cdc226e15adf",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-23T19:58:07.7504351+04:30\",\"t\":0}]",
                            Name = "آپارتمان",
                            Type = 1
                        },
                        new
                        {
                            Id = "48a1f35f-74c3-4580-812b-26662e43bb88",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-23T19:58:07.7504351+04:30\",\"t\":0}]",
                            Name = "مغازه",
                            Type = 1
                        });
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Check", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("Bank")
                        .IsRequired();

                    b.Property<string>("CheckNumber");

                    b.Property<string>("DealId");

                    b.Property<string>("Description");

                    b.Property<DateTime>("PayDate");

                    b.Property<string>("Price")
                        .IsRequired();

                    b.Property<string>("ReminderId");

                    b.HasKey("Id");

                    b.HasIndex("DealId");

                    b.HasIndex("ReminderId");

                    b.ToTable("Check");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Customer", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("Audit");

                    b.Property<string>("MobileNumber")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("PhoneNumber");

                    b.HasKey("Id");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Deal", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("Barcode");

                    b.Property<string>("Description");

                    b.HasKey("Id");

                    b.ToTable("Deal");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.DealPayment", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<decimal>("CommissionPrice");

                    b.Property<string>("DealId")
                        .IsRequired();

                    b.Property<DateTime>("PayDate");

                    b.Property<string>("Text");

                    b.Property<decimal>("TipPrice");

                    b.HasKey("Id");

                    b.HasIndex("DealId");

                    b.ToTable("DealPayment");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.DealRequest", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("DealId");

                    b.Property<string>("ItemId")
                        .IsRequired();

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DealId")
                        .IsUnique()
                        .HasFilter("[DealId] IS NOT NULL");

                    b.HasIndex("ItemId");

                    b.ToTable("DealRequest");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.District", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("District");

                    b.HasData(
                        new
                        {
                            Id = "fd0bab80-829d-41cd-a915-10937d980e1d",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-23T19:58:07.7504351+04:30\",\"t\":0}]",
                            Name = "زیتون کارمندی"
                        },
                        new
                        {
                            Id = "47977aa3-ced7-43af-8f98-ed60453ee344",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-23T19:58:07.7504351+04:30\",\"t\":0}]",
                            Name = "زیتون کارگری"
                        },
                        new
                        {
                            Id = "5f5be03c-740c-48e1-bb71-37eda18e19d1",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-23T19:58:07.7504351+04:30\",\"t\":0}]",
                            Name = "باهنر"
                        },
                        new
                        {
                            Id = "e74a124f-da07-4fdd-8883-0e24497d0a81",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-23T19:58:07.7504351+04:30\",\"t\":0}]",
                            Name = "کیان آباد"
                        },
                        new
                        {
                            Id = "d42e0bd1-3702-4276-85f9-8b7f90e91719",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-23T19:58:07.7504351+04:30\",\"t\":0}]",
                            Name = "کیانپارس"
                        },
                        new
                        {
                            Id = "28104595-c4dc-4701-94b8-914a51f9e421",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-23T19:58:07.7504351+04:30\",\"t\":0}]",
                            Name = "ملیراه"
                        });
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Division", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Division");

                    b.HasData(
                        new
                        {
                            Id = "1eef928d-1d36-4726-a507-94c9fb462b74",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-23T19:58:07.7504351+04:30\",\"t\":0}]",
                            Name = "املاک"
                        },
                        new
                        {
                            Id = "33737ac3-7805-4f9a-b467-515419c1ed87",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-23T19:58:07.7504351+04:30\",\"t\":0}]",
                            Name = "کارواش"
                        });
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Employee", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("Audit");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("Mobile")
                        .IsRequired();

                    b.Property<string>("Phone");

                    b.HasKey("Id");

                    b.HasIndex("Mobile")
                        .IsUnique();

                    b.ToTable("Employee");

                    b.HasData(
                        new
                        {
                            Id = "45920ed3-e213-4b96-bb40-992bb5336f03",
                            Address = "باهنر",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-23T19:58:07.7504351+04:30\",\"t\":0}]",
                            FirstName = "هانی",
                            LastName = "موسی زاده",
                            Mobile = "09166000341",
                            Phone = "33379367"
                        });
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.EmployeeDivision", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("DivisionId")
                        .IsRequired();

                    b.Property<string>("EmployeeId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("DivisionId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeDivision");

                    b.HasData(
                        new
                        {
                            Id = "65955d68-c0fe-4443-87a3-68ca29c2d565",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-23T19:58:07.7504351+04:30\",\"t\":0}]",
                            DivisionId = "1eef928d-1d36-4726-a507-94c9fb462b74",
                            EmployeeId = "45920ed3-e213-4b96-bb40-992bb5336f03"
                        });
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.EmployeeStatus", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("EmployeeId")
                        .IsRequired();

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeStatus");

                    b.HasData(
                        new
                        {
                            Id = "2a39e8de-6688-49d8-bde5-16e14dfccd6a",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-23T19:58:07.7504351+04:30\",\"t\":0}]",
                            EmployeeId = "45920ed3-e213-4b96-bb40-992bb5336f03",
                            Status = 0
                        });
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Facility", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Facility");

                    b.HasData(
                        new
                        {
                            Id = "6629f102-73fe-4c5e-a83f-8c969b1854b9",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-23T19:58:07.7504351+04:30\",\"t\":0}]",
                            Name = "سالن بدنسازی"
                        },
                        new
                        {
                            Id = "1c36a5da-275a-4855-b8f4-daba733c81eb",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-23T19:58:07.7504351+04:30\",\"t\":0}]",
                            Name = "پارکینگ"
                        },
                        new
                        {
                            Id = "93d1c568-a2a8-48f1-b74a-650a8fc4b0a1",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-23T19:58:07.7504351+04:30\",\"t\":0}]",
                            Name = "آسانسور"
                        },
                        new
                        {
                            Id = "d501d5b7-6fd8-4748-9263-5b909a58852f",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-23T19:58:07.7504351+04:30\",\"t\":0}]",
                            Name = "سالن همایش"
                        },
                        new
                        {
                            Id = "0394320b-eec4-4264-b73a-003010cf9f49",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-23T19:58:07.7504351+04:30\",\"t\":0}]",
                            Name = "آنتن مرکزی"
                        });
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Feature", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("Feature");

                    b.HasData(
                        new
                        {
                            Id = "dadae5be-a34c-458d-aab3-a397b20f0d14",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-23T19:58:07.7504351+04:30\",\"t\":0}]",
                            Name = "بر زمین",
                            Type = 1
                        },
                        new
                        {
                            Id = "7b3c8c29-fb40-4673-bb94-af4055608b76",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-23T19:58:07.7504351+04:30\",\"t\":0}]",
                            Name = "قیمت نهایی",
                            Type = 0
                        },
                        new
                        {
                            Id = "5687dfb0-28d4-4c55-afe4-632987f3f45e",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-23T19:58:07.7504351+04:30\",\"t\":0}]",
                            Name = "بودجه",
                            Type = 2
                        },
                        new
                        {
                            Id = "9e7f8b8f-bc95-4506-ab0f-bbbda493f3cf",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-23T19:58:07.7504351+04:30\",\"t\":0}]",
                            Name = "متراژ",
                            Type = 1
                        },
                        new
                        {
                            Id = "e5426489-51ac-473a-9e8d-27945a61fba5",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-23T19:58:07.7504351+04:30\",\"t\":0}]",
                            Name = "پیش پرداخت",
                            Type = 2
                        },
                        new
                        {
                            Id = "6feb5af4-61fd-4809-b9a1-9b1f70df7f86",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-23T19:58:07.7504351+04:30\",\"t\":0}]",
                            Name = "قیمت هر متر",
                            Type = 0
                        },
                        new
                        {
                            Id = "a200286b-1812-41c6-b43a-39d4d275821b",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-23T19:58:07.7504351+04:30\",\"t\":0}]",
                            Name = "تعداد خواب",
                            Type = 1
                        },
                        new
                        {
                            Id = "f08df191-358d-47c1-a481-07de2023f2e0",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-23T19:58:07.7504351+04:30\",\"t\":0}]",
                            Name = "کرایه",
                            Type = 2
                        });
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.FixedSalary", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("EmployeeId")
                        .IsRequired();

                    b.Property<double>("Value");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("FixedSalary");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Insurance", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("EmployeeId")
                        .IsRequired();

                    b.Property<double>("Price");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Insurance");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Item", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("CategoryId")
                        .IsRequired();

                    b.Property<string>("Description");

                    b.Property<string>("PropertyId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PropertyId");

                    b.ToTable("Item");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.ItemFeature", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("FeatureId")
                        .IsRequired();

                    b.Property<string>("ItemId")
                        .IsRequired();

                    b.Property<string>("Value")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("FeatureId");

                    b.HasIndex("ItemId");

                    b.ToTable("ItemFeature");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Leave", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("EmployeeId")
                        .IsRequired();

                    b.Property<DateTime>("From");

                    b.Property<string>("Reason");

                    b.Property<DateTime>("To");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Leave");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.ManagementPercent", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("EmployeeId")
                        .IsRequired();

                    b.Property<int>("Percent");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("ManagementPercent");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Ownership", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("CustomerId")
                        .IsRequired();

                    b.Property<string>("Description");

                    b.Property<int>("Dong");

                    b.Property<string>("PropertyOwnershipId");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PropertyOwnershipId");

                    b.ToTable("Ownership");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Payment", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("EmployeeId")
                        .IsRequired();

                    b.Property<string>("Text");

                    b.Property<int>("Type");

                    b.Property<double>("Value");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Picture", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("CheckId");

                    b.Property<string>("DealId");

                    b.Property<string>("DealPaymentId");

                    b.Property<string>("EmployeeId");

                    b.Property<string>("File")
                        .IsRequired();

                    b.Property<string>("PaymentId");

                    b.Property<string>("PropertyId");

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.HasIndex("CheckId");

                    b.HasIndex("DealId");

                    b.HasIndex("DealPaymentId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("PropertyId");

                    b.ToTable("Picture");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Presence", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<DateTime>("Date");

                    b.Property<string>("EmployeeId")
                        .IsRequired();

                    b.Property<int>("Hour");

                    b.Property<int>("Minute");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Presence");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Property", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Alley");

                    b.Property<string>("Audit");

                    b.Property<string>("BuildingName");

                    b.Property<string>("CategoryId");

                    b.Property<string>("Description");

                    b.Property<string>("DistrictId")
                        .IsRequired();

                    b.Property<int>("Flat");

                    b.Property<int>("Floor");

                    b.Property<IPoint>("Geolocation");

                    b.Property<string>("Number");

                    b.Property<string>("Street")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DistrictId");

                    b.ToTable("Property");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.PropertyFacility", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("FacilityId")
                        .IsRequired();

                    b.Property<string>("PropertyId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("FacilityId");

                    b.HasIndex("PropertyId");

                    b.ToTable("PropertyFacility");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.PropertyFeature", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("FeatureId")
                        .IsRequired();

                    b.Property<string>("PropertyId")
                        .IsRequired();

                    b.Property<string>("Value")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("FeatureId");

                    b.HasIndex("PropertyId");

                    b.ToTable("PropertyFeature");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.PropertyOwnership", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("PropertyId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("PropertyOwnership");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Reminder", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Reminder");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Sms", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("CustomerId");

                    b.Property<string>("EmployeeId");

                    b.Property<int>("Provider");

                    b.Property<string>("Receiver");

                    b.Property<string>("ReferenceId");

                    b.Property<string>("Sender");

                    b.Property<string>("StatusJson");

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Sms");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("EmployeeId")
                        .IsRequired();

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<int>("Role");

                    b.Property<string>("Username")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = "0a658015-ea5d-481e-aa14-3c39b0e6d328",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-23T19:58:07.7504351+04:30\",\"t\":0}]",
                            EmployeeId = "45920ed3-e213-4b96-bb40-992bb5336f03",
                            Password = "YmAdyc6Ph9PNcJOLeira6w==",
                            Role = 2,
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.UserItemCategory", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("CategoryId")
                        .IsRequired();

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("UserItemCategory");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.UserPropertyCategory", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("CategoryId")
                        .IsRequired();

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPropertyCategory");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Applicant", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Customer", "Customer")
                        .WithMany("Applicants")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RealEstate.Services.Database.Tables.Item", "Item")
                        .WithMany("Applicants")
                        .HasForeignKey("ItemId");

                    b.HasOne("RealEstate.Services.Database.Tables.User", "User")
                        .WithMany("Applicants")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.ApplicantFeature", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Applicant", "Applicant")
                        .WithMany("ApplicantFeatures")
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RealEstate.Services.Database.Tables.Feature", "Feature")
                        .WithMany("ApplicantFeatures")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Beneficiary", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Deal", "Deal")
                        .WithMany("Beneficiaries")
                        .HasForeignKey("DealId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RealEstate.Services.Database.Tables.User", "User")
                        .WithMany("Beneficiaries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Check", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Deal", "Deal")
                        .WithMany("Checks")
                        .HasForeignKey("DealId");

                    b.HasOne("RealEstate.Services.Database.Tables.Reminder", "Reminder")
                        .WithMany("Checks")
                        .HasForeignKey("ReminderId");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.DealPayment", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Deal", "Deal")
                        .WithMany("DealPayments")
                        .HasForeignKey("DealId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.DealRequest", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Deal", "Deal")
                        .WithOne("DealRequest")
                        .HasForeignKey("RealEstate.Services.Database.Tables.DealRequest", "DealId");

                    b.HasOne("RealEstate.Services.Database.Tables.Item", "Item")
                        .WithMany("DealRequests")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.EmployeeDivision", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Division", "Division")
                        .WithMany("EmployeeDivisions")
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RealEstate.Services.Database.Tables.Employee", "Employee")
                        .WithMany("EmployeeDivisions")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.EmployeeStatus", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Employee", "Employee")
                        .WithMany("EmployeeStatuses")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.FixedSalary", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Employee", "Employee")
                        .WithMany("FixedSalaries")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Insurance", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Employee", "Employee")
                        .WithMany("Insurances")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Item", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Category", "Category")
                        .WithMany("Items")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RealEstate.Services.Database.Tables.Property", "Property")
                        .WithMany("Items")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.ItemFeature", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Feature", "Feature")
                        .WithMany("ItemFeatures")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RealEstate.Services.Database.Tables.Item", "Item")
                        .WithMany("ItemFeatures")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Leave", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Employee", "Employee")
                        .WithMany("Leaves")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.ManagementPercent", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Employee", "Employee")
                        .WithMany("ManagementPercents")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Ownership", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Customer", "Customer")
                        .WithMany("Ownerships")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RealEstate.Services.Database.Tables.PropertyOwnership", "PropertyOwnership")
                        .WithMany("Ownerships")
                        .HasForeignKey("PropertyOwnershipId");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Payment", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Employee", "Employee")
                        .WithMany("Payments")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Picture", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Check", "Check")
                        .WithMany("Pictures")
                        .HasForeignKey("CheckId");

                    b.HasOne("RealEstate.Services.Database.Tables.Deal", "Deal")
                        .WithMany("Pictures")
                        .HasForeignKey("DealId");

                    b.HasOne("RealEstate.Services.Database.Tables.DealPayment", "DealPayment")
                        .WithMany("Pictures")
                        .HasForeignKey("DealPaymentId");

                    b.HasOne("RealEstate.Services.Database.Tables.Employee", "Employee")
                        .WithMany("Pictures")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("RealEstate.Services.Database.Tables.Payment", "Payment")
                        .WithMany("Pictures")
                        .HasForeignKey("PaymentId");

                    b.HasOne("RealEstate.Services.Database.Tables.Property", "Property")
                        .WithMany("Pictures")
                        .HasForeignKey("PropertyId");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Presence", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Employee", "Employee")
                        .WithMany("Presences")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Property", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Category", "Category")
                        .WithMany("Properties")
                        .HasForeignKey("CategoryId");

                    b.HasOne("RealEstate.Services.Database.Tables.District", "District")
                        .WithMany("Properties")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.PropertyFacility", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Facility", "Facility")
                        .WithMany("PropertyFacilities")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RealEstate.Services.Database.Tables.Property", "Property")
                        .WithMany("PropertyFacilities")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.PropertyFeature", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Feature", "Feature")
                        .WithMany("PropertyFeatures")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RealEstate.Services.Database.Tables.Property", "Property")
                        .WithMany("PropertyFeatures")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.PropertyOwnership", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Property", "Property")
                        .WithMany("PropertyOwnerships")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Reminder", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.User", "User")
                        .WithMany("Reminders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Sms", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Customer", "Customer")
                        .WithMany("Smses")
                        .HasForeignKey("CustomerId");

                    b.HasOne("RealEstate.Services.Database.Tables.Employee", "Employee")
                        .WithMany("Smses")
                        .HasForeignKey("EmployeeId");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.User", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Employee", "Employee")
                        .WithMany("Users")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.UserItemCategory", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Category", "Category")
                        .WithMany("UserItemCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RealEstate.Services.Database.Tables.User", "User")
                        .WithMany("UserItemCategories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.UserPropertyCategory", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Category", "Category")
                        .WithMany("UserPropertyCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RealEstate.Services.Database.Tables.User", "User")
                        .WithMany("UserPropertyCategories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
