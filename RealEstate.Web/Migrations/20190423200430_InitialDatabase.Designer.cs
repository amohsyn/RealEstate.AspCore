// <auto-generated />
using System;
using GeoAPI.Geometries;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RealEstate.Services.Database;

namespace RealEstate.Web.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190423200430_InitialDatabase")]
    partial class InitialDatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Applicant", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("CustomerId")
                        .IsRequired();

                    b.Property<string>("Description");

                    b.Property<string>("ItemId");

                    b.Property<int>("Type");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ItemId");

                    b.HasIndex("UserId");

                    b.ToTable("Applicant");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.ApplicantFeature", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicantId")
                        .IsRequired();

                    b.Property<string>("Audit");

                    b.Property<string>("FeatureId")
                        .IsRequired();

                    b.Property<string>("Value")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("FeatureId");

                    b.ToTable("ApplicantFeature");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Beneficiary", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<int>("CommissionPercent");

                    b.Property<string>("DealId")
                        .IsRequired();

                    b.Property<int>("TipPercent");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("DealId");

                    b.HasIndex("UserId");

                    b.ToTable("Beneficiary");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Category", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = "fcdf54c9-2e82-4384-acf3-4be023803576",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-24T00:34:29.7761901+04:30\",\"t\":0}]",
                            Name = "خرید و فروش",
                            Type = 0
                        },
                        new
                        {
                            Id = "18dada49-eb92-4435-9d68-4513226376fa",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-24T00:34:29.7761901+04:30\",\"t\":0}]",
                            Name = "زمین",
                            Type = 1
                        },
                        new
                        {
                            Id = "296b08fe-3d69-45d5-b8c7-1b2aa5205a0c",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-24T00:34:29.7761901+04:30\",\"t\":0}]",
                            Name = "ویلایی",
                            Type = 1
                        },
                        new
                        {
                            Id = "07d0fc97-1cf2-4688-aee8-24919f68b6bd",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-24T00:34:29.7761901+04:30\",\"t\":0}]",
                            Name = "مشارکت در ساخت",
                            Type = 0
                        },
                        new
                        {
                            Id = "7ee3c867-cb10-4668-8f9c-e0b6768aca45",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-24T00:34:29.7761901+04:30\",\"t\":0}]",
                            Name = "رهن و اجاره",
                            Type = 0
                        },
                        new
                        {
                            Id = "25b18d5b-f861-4b2c-bf82-a4875db8eb26",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-24T00:34:29.7761901+04:30\",\"t\":0}]",
                            Name = "رهن کامل",
                            Type = 0
                        },
                        new
                        {
                            Id = "9c356476-d411-4e7f-a812-39b59f514bad",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-24T00:34:29.7761901+04:30\",\"t\":0}]",
                            Name = "آپارتمان",
                            Type = 1
                        },
                        new
                        {
                            Id = "dd0a18d7-7770-4d8d-bb95-3caf4bed298e",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-24T00:34:29.7761901+04:30\",\"t\":0}]",
                            Name = "مغازه",
                            Type = 1
                        });
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Customer", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("Audit");

                    b.Property<string>("MobileNumber")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("PhoneNumber");

                    b.HasKey("Id");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Deal", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("Barcode");

                    b.Property<decimal>("CommissionPrice");

                    b.Property<string>("Description");

                    b.Property<decimal>("TipPrice");

                    b.HasKey("Id");

                    b.ToTable("Deal");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.DealRequest", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("DealId");

                    b.Property<string>("ItemId")
                        .IsRequired();

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DealId")
                        .IsUnique()
                        .HasFilter("[DealId] IS NOT NULL");

                    b.HasIndex("ItemId");

                    b.ToTable("DealRequest");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.District", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("District");

                    b.HasData(
                        new
                        {
                            Id = "dbaa9cd6-bff6-43f2-b0a7-0f8626894964",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-24T00:34:29.7761901+04:30\",\"t\":0}]",
                            Name = "زیتون کارمندی"
                        },
                        new
                        {
                            Id = "f65efe6f-d7e5-468b-b824-6d5b90c146f2",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-24T00:34:29.7761901+04:30\",\"t\":0}]",
                            Name = "زیتون کارگری"
                        },
                        new
                        {
                            Id = "245fc791-8e69-400c-a9fe-b62f7edcd639",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-24T00:34:29.7761901+04:30\",\"t\":0}]",
                            Name = "باهنر"
                        },
                        new
                        {
                            Id = "9370f570-144f-4726-848c-55998ff05592",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-24T00:34:29.7761901+04:30\",\"t\":0}]",
                            Name = "کیان آباد"
                        },
                        new
                        {
                            Id = "2c5e2312-a2f9-4828-8335-e4b12f12bd0b",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-24T00:34:29.7761901+04:30\",\"t\":0}]",
                            Name = "کیانپارس"
                        },
                        new
                        {
                            Id = "36010ce4-8c6e-48c9-a0f1-9a72c321add2",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-24T00:34:29.7761901+04:30\",\"t\":0}]",
                            Name = "ملیراه"
                        });
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Division", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Division");

                    b.HasData(
                        new
                        {
                            Id = "0eb73618-1fd1-4bd0-9bdf-d1b8203905c8",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-24T00:34:29.7761901+04:30\",\"t\":0}]",
                            Name = "املاک"
                        },
                        new
                        {
                            Id = "d196f024-32c7-4c7a-8e7b-f0ba53356583",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-24T00:34:29.7761901+04:30\",\"t\":0}]",
                            Name = "کارواش"
                        });
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Employee", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("Audit");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("Mobile")
                        .IsRequired();

                    b.Property<string>("Phone");

                    b.HasKey("Id");

                    b.HasIndex("Mobile")
                        .IsUnique();

                    b.ToTable("Employee");

                    b.HasData(
                        new
                        {
                            Id = "e17a64aa-9732-4e11-ba0a-26ee515d8dd5",
                            Address = "باهنر",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-24T00:34:29.7761901+04:30\",\"t\":0}]",
                            FirstName = "هانی",
                            LastName = "موسی زاده",
                            Mobile = "09166000341",
                            Phone = "33379367"
                        });
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.EmployeeDivision", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("DivisionId")
                        .IsRequired();

                    b.Property<string>("EmployeeId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("DivisionId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeDivision");

                    b.HasData(
                        new
                        {
                            Id = "6a7e9e40-3535-465a-883f-86fa21cb58d7",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-24T00:34:29.7761901+04:30\",\"t\":0}]",
                            DivisionId = "0eb73618-1fd1-4bd0-9bdf-d1b8203905c8",
                            EmployeeId = "e17a64aa-9732-4e11-ba0a-26ee515d8dd5"
                        });
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.EmployeeStatus", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("EmployeeId")
                        .IsRequired();

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeStatus");

                    b.HasData(
                        new
                        {
                            Id = "77cf3bf9-013f-46e9-8889-7b615e8a8c82",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-24T00:34:29.7761901+04:30\",\"t\":0}]",
                            EmployeeId = "e17a64aa-9732-4e11-ba0a-26ee515d8dd5",
                            Status = 0
                        });
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Facility", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Facility");

                    b.HasData(
                        new
                        {
                            Id = "bda52f5f-76b6-49f1-a0b8-a5626d7bf62e",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-24T00:34:29.7761901+04:30\",\"t\":0}]",
                            Name = "سالن بدنسازی"
                        },
                        new
                        {
                            Id = "2dd39a45-fda3-4b60-b58f-bda831d3a7fd",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-24T00:34:29.7761901+04:30\",\"t\":0}]",
                            Name = "پارکینگ"
                        },
                        new
                        {
                            Id = "ea761002-3277-491e-bbc5-08d1b7d1d2a7",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-24T00:34:29.7761901+04:30\",\"t\":0}]",
                            Name = "آسانسور"
                        },
                        new
                        {
                            Id = "538e01d9-fbfe-4bc9-8e33-a789edf02cbc",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-24T00:34:29.7761901+04:30\",\"t\":0}]",
                            Name = "سالن همایش"
                        },
                        new
                        {
                            Id = "9098ca45-b036-4c98-a41e-f3ff8dc199cd",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-24T00:34:29.7761901+04:30\",\"t\":0}]",
                            Name = "آنتن مرکزی"
                        });
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Feature", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("Feature");

                    b.HasData(
                        new
                        {
                            Id = "9c34c06c-0989-42b4-930e-db50260bb2f9",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-24T00:34:29.7761901+04:30\",\"t\":0}]",
                            Name = "بر زمین",
                            Type = 1
                        },
                        new
                        {
                            Id = "9eb642bd-5320-4b27-998e-8f90fb95116e",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-24T00:34:29.7761901+04:30\",\"t\":0}]",
                            Name = "قیمت نهایی",
                            Type = 0
                        },
                        new
                        {
                            Id = "8d4576a7-7728-47de-8c45-e348e30e67fb",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-24T00:34:29.7761901+04:30\",\"t\":0}]",
                            Name = "بودجه",
                            Type = 2
                        },
                        new
                        {
                            Id = "f74540f2-140b-4b34-9789-b4823bb940bb",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-24T00:34:29.7761901+04:30\",\"t\":0}]",
                            Name = "متراژ",
                            Type = 1
                        },
                        new
                        {
                            Id = "dde31d12-397e-4a0c-8fd7-d87efd345db6",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-24T00:34:29.7761901+04:30\",\"t\":0}]",
                            Name = "پیش پرداخت",
                            Type = 2
                        },
                        new
                        {
                            Id = "28f4e37a-aeae-4e00-92e8-f2a0a28f8b40",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-24T00:34:29.7761901+04:30\",\"t\":0}]",
                            Name = "قیمت هر متر",
                            Type = 0
                        },
                        new
                        {
                            Id = "aba3615a-c4ab-443d-af8a-a45ccef6d613",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-24T00:34:29.7761901+04:30\",\"t\":0}]",
                            Name = "تعداد خواب",
                            Type = 1
                        },
                        new
                        {
                            Id = "32126744-4fed-406d-8a44-e772611270ad",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-24T00:34:29.7761901+04:30\",\"t\":0}]",
                            Name = "کرایه",
                            Type = 2
                        });
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.FixedSalary", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("EmployeeId")
                        .IsRequired();

                    b.Property<double>("Value");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("FixedSalary");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Insurance", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("EmployeeId")
                        .IsRequired();

                    b.Property<double>("Price");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Insurance");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Item", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("CategoryId")
                        .IsRequired();

                    b.Property<string>("Description");

                    b.Property<string>("PropertyId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PropertyId");

                    b.ToTable("Item");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.ItemFeature", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("FeatureId")
                        .IsRequired();

                    b.Property<string>("ItemId")
                        .IsRequired();

                    b.Property<string>("Value")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("FeatureId");

                    b.HasIndex("ItemId");

                    b.ToTable("ItemFeature");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Leave", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("EmployeeId")
                        .IsRequired();

                    b.Property<DateTime>("From");

                    b.Property<string>("Reason");

                    b.Property<DateTime>("To");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Leave");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.ManagementPercent", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("EmployeeId")
                        .IsRequired();

                    b.Property<int>("Percent");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("ManagementPercent");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Ownership", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("CustomerId")
                        .IsRequired();

                    b.Property<string>("Description");

                    b.Property<int>("Dong");

                    b.Property<string>("PropertyOwnershipId");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PropertyOwnershipId");

                    b.ToTable("Ownership");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Payment", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("EmployeeId")
                        .IsRequired();

                    b.Property<string>("Text");

                    b.Property<int>("Type");

                    b.Property<double>("Value");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Picture", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("DealId");

                    b.Property<string>("EmployeeId");

                    b.Property<string>("File")
                        .IsRequired();

                    b.Property<string>("PaymentId");

                    b.Property<string>("PropertyId");

                    b.Property<string>("ReminderId");

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.HasIndex("DealId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("PropertyId");

                    b.HasIndex("ReminderId");

                    b.ToTable("Picture");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Presence", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<DateTime>("Date");

                    b.Property<string>("EmployeeId")
                        .IsRequired();

                    b.Property<int>("Hour");

                    b.Property<int>("Minute");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Presence");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Property", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Alley");

                    b.Property<string>("Audit");

                    b.Property<string>("BuildingName");

                    b.Property<string>("CategoryId");

                    b.Property<string>("Description");

                    b.Property<string>("DistrictId")
                        .IsRequired();

                    b.Property<int>("Flat");

                    b.Property<int>("Floor");

                    b.Property<IPoint>("Geolocation");

                    b.Property<string>("Number");

                    b.Property<string>("Street")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DistrictId");

                    b.ToTable("Property");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.PropertyFacility", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("FacilityId")
                        .IsRequired();

                    b.Property<string>("PropertyId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("FacilityId");

                    b.HasIndex("PropertyId");

                    b.ToTable("PropertyFacility");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.PropertyFeature", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("FeatureId")
                        .IsRequired();

                    b.Property<string>("PropertyId")
                        .IsRequired();

                    b.Property<string>("Value")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("FeatureId");

                    b.HasIndex("PropertyId");

                    b.ToTable("PropertyFeature");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.PropertyOwnership", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("PropertyId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("PropertyOwnership");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Reminder", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("CheckBank");

                    b.Property<string>("CheckNumber");

                    b.Property<DateTime>("Date");

                    b.Property<string>("DealId");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<decimal>("Price");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("DealId");

                    b.HasIndex("UserId");

                    b.ToTable("Reminder");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Sms", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("CustomerId");

                    b.Property<string>("EmployeeId");

                    b.Property<int>("Provider");

                    b.Property<string>("Receiver");

                    b.Property<string>("ReferenceId");

                    b.Property<string>("Sender");

                    b.Property<string>("StatusJson");

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Sms");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("EmployeeId")
                        .IsRequired();

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<int>("Role");

                    b.Property<string>("Username")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = "85bf213c-2af9-4e36-ae45-4d4f5dfd2144",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-24T00:34:29.7761901+04:30\",\"t\":0}]",
                            EmployeeId = "e17a64aa-9732-4e11-ba0a-26ee515d8dd5",
                            Password = "YmAdyc6Ph9PNcJOLeira6w==",
                            Role = 2,
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.UserItemCategory", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("CategoryId")
                        .IsRequired();

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("UserItemCategory");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.UserPropertyCategory", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("CategoryId")
                        .IsRequired();

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPropertyCategory");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Applicant", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Customer", "Customer")
                        .WithMany("Applicants")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RealEstate.Services.Database.Tables.Item", "Item")
                        .WithMany("Applicants")
                        .HasForeignKey("ItemId");

                    b.HasOne("RealEstate.Services.Database.Tables.User", "User")
                        .WithMany("Applicants")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.ApplicantFeature", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Applicant", "Applicant")
                        .WithMany("ApplicantFeatures")
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RealEstate.Services.Database.Tables.Feature", "Feature")
                        .WithMany("ApplicantFeatures")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Beneficiary", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Deal", "Deal")
                        .WithMany("Beneficiaries")
                        .HasForeignKey("DealId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RealEstate.Services.Database.Tables.User", "User")
                        .WithMany("Beneficiaries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.DealRequest", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Deal", "Deal")
                        .WithOne("DealRequest")
                        .HasForeignKey("RealEstate.Services.Database.Tables.DealRequest", "DealId");

                    b.HasOne("RealEstate.Services.Database.Tables.Item", "Item")
                        .WithMany("DealRequests")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.EmployeeDivision", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Division", "Division")
                        .WithMany("EmployeeDivisions")
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RealEstate.Services.Database.Tables.Employee", "Employee")
                        .WithMany("EmployeeDivisions")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.EmployeeStatus", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Employee", "Employee")
                        .WithMany("EmployeeStatuses")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.FixedSalary", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Employee", "Employee")
                        .WithMany("FixedSalaries")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Insurance", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Employee", "Employee")
                        .WithMany("Insurances")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Item", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Category", "Category")
                        .WithMany("Items")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RealEstate.Services.Database.Tables.Property", "Property")
                        .WithMany("Items")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.ItemFeature", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Feature", "Feature")
                        .WithMany("ItemFeatures")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RealEstate.Services.Database.Tables.Item", "Item")
                        .WithMany("ItemFeatures")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Leave", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Employee", "Employee")
                        .WithMany("Leaves")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.ManagementPercent", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Employee", "Employee")
                        .WithMany("ManagementPercents")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Ownership", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Customer", "Customer")
                        .WithMany("Ownerships")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RealEstate.Services.Database.Tables.PropertyOwnership", "PropertyOwnership")
                        .WithMany("Ownerships")
                        .HasForeignKey("PropertyOwnershipId");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Payment", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Employee", "Employee")
                        .WithMany("Payments")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Picture", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Deal", "Deal")
                        .WithMany("Pictures")
                        .HasForeignKey("DealId");

                    b.HasOne("RealEstate.Services.Database.Tables.Employee", "Employee")
                        .WithMany("Pictures")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("RealEstate.Services.Database.Tables.Payment", "Payment")
                        .WithMany("Pictures")
                        .HasForeignKey("PaymentId");

                    b.HasOne("RealEstate.Services.Database.Tables.Property", "Property")
                        .WithMany("Pictures")
                        .HasForeignKey("PropertyId");

                    b.HasOne("RealEstate.Services.Database.Tables.Reminder", "Reminder")
                        .WithMany("Pictures")
                        .HasForeignKey("ReminderId");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Presence", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Employee", "Employee")
                        .WithMany("Presences")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Property", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Category", "Category")
                        .WithMany("Properties")
                        .HasForeignKey("CategoryId");

                    b.HasOne("RealEstate.Services.Database.Tables.District", "District")
                        .WithMany("Properties")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.PropertyFacility", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Facility", "Facility")
                        .WithMany("PropertyFacilities")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RealEstate.Services.Database.Tables.Property", "Property")
                        .WithMany("PropertyFacilities")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.PropertyFeature", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Feature", "Feature")
                        .WithMany("PropertyFeatures")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RealEstate.Services.Database.Tables.Property", "Property")
                        .WithMany("PropertyFeatures")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.PropertyOwnership", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Property", "Property")
                        .WithMany("PropertyOwnerships")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Reminder", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Deal", "Deal")
                        .WithMany("Reminders")
                        .HasForeignKey("DealId");

                    b.HasOne("RealEstate.Services.Database.Tables.User", "User")
                        .WithMany("Reminders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Sms", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Customer", "Customer")
                        .WithMany("Smses")
                        .HasForeignKey("CustomerId");

                    b.HasOne("RealEstate.Services.Database.Tables.Employee", "Employee")
                        .WithMany("Smses")
                        .HasForeignKey("EmployeeId");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.User", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Employee", "Employee")
                        .WithMany("Users")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.UserItemCategory", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Category", "Category")
                        .WithMany("UserItemCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RealEstate.Services.Database.Tables.User", "User")
                        .WithMany("UserItemCategories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.UserPropertyCategory", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Category", "Category")
                        .WithMany("UserPropertyCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RealEstate.Services.Database.Tables.User", "User")
                        .WithMany("UserPropertyCategories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
