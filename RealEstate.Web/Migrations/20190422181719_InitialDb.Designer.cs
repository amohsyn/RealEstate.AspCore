// <auto-generated />
using System;
using GeoAPI.Geometries;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RealEstate.Services.Database;

namespace RealEstate.Web.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190422181719_InitialDb")]
    partial class InitialDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Applicant", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("CustomerId")
                        .IsRequired();

                    b.Property<string>("Description");

                    b.Property<string>("ItemId");

                    b.Property<int>("Type");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ItemId");

                    b.HasIndex("UserId");

                    b.ToTable("Applicant");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.ApplicantFeature", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicantId")
                        .IsRequired();

                    b.Property<string>("Audit");

                    b.Property<string>("FeatureId")
                        .IsRequired();

                    b.Property<string>("Value")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("FeatureId");

                    b.ToTable("ApplicantFeature");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Beneficiary", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<int>("CommissionPercent");

                    b.Property<string>("DealId")
                        .IsRequired();

                    b.Property<int>("TipPercent");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("DealId");

                    b.HasIndex("UserId");

                    b.ToTable("Beneficiary");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Category", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = "c6992436-f6c6-4a2f-b57e-2fb81ac3ed44",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-22T22:47:17.5773362+04:30\",\"t\":0}]",
                            Name = "خرید و فروش",
                            Type = 0
                        },
                        new
                        {
                            Id = "ec4072f8-17c0-4b58-b612-e516640c9815",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-22T22:47:17.5773362+04:30\",\"t\":0}]",
                            Name = "زمین",
                            Type = 1
                        },
                        new
                        {
                            Id = "567d7eff-8a0c-4884-902e-3a12066bf65a",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-22T22:47:17.5773362+04:30\",\"t\":0}]",
                            Name = "ویلایی",
                            Type = 1
                        },
                        new
                        {
                            Id = "0e9aa361-67db-4ff2-9406-f619964d183b",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-22T22:47:17.5773362+04:30\",\"t\":0}]",
                            Name = "مشارکت در ساخت",
                            Type = 0
                        },
                        new
                        {
                            Id = "26fb3d49-2063-44e2-b537-d36ad1e99177",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-22T22:47:17.5773362+04:30\",\"t\":0}]",
                            Name = "رهن و اجاره",
                            Type = 0
                        },
                        new
                        {
                            Id = "611272f2-ad7b-42e2-ba1c-d5a28500a230",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-22T22:47:17.5773362+04:30\",\"t\":0}]",
                            Name = "رهن کامل",
                            Type = 0
                        },
                        new
                        {
                            Id = "93ca1b9d-56d2-4519-b076-ebfeb1a55067",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-22T22:47:17.5773362+04:30\",\"t\":0}]",
                            Name = "آپارتمان",
                            Type = 1
                        },
                        new
                        {
                            Id = "1812466e-880a-4f25-97a0-6ad728fc99a6",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-22T22:47:17.5773362+04:30\",\"t\":0}]",
                            Name = "مغازه",
                            Type = 1
                        });
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Check", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("Bank");

                    b.Property<string>("CheckNumber");

                    b.Property<string>("DealId");

                    b.Property<string>("Description");

                    b.Property<DateTime>("PayDate");

                    b.Property<string>("Price");

                    b.Property<string>("ReminderId");

                    b.HasKey("Id");

                    b.HasIndex("DealId");

                    b.HasIndex("ReminderId");

                    b.ToTable("Check");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Customer", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("Audit");

                    b.Property<string>("MobileNumber")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("PhoneNumber");

                    b.HasKey("Id");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Deal", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("Barcode");

                    b.Property<string>("Description");

                    b.HasKey("Id");

                    b.ToTable("Deal");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.DealPayment", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<decimal>("CommissionPrice");

                    b.Property<string>("DealId")
                        .IsRequired();

                    b.Property<DateTime>("PayDate");

                    b.Property<string>("Text");

                    b.Property<decimal>("TipPrice");

                    b.HasKey("Id");

                    b.HasIndex("DealId");

                    b.ToTable("DealPayment");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.DealRequest", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("DealId");

                    b.Property<string>("ItemId")
                        .IsRequired();

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DealId")
                        .IsUnique()
                        .HasFilter("[DealId] IS NOT NULL");

                    b.HasIndex("ItemId");

                    b.ToTable("DealRequest");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.District", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("District");

                    b.HasData(
                        new
                        {
                            Id = "8c89e1fd-e3d3-4ff8-bac5-df33ebade352",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-22T22:47:17.5773362+04:30\",\"t\":0}]",
                            Name = "زیتون کارمندی"
                        },
                        new
                        {
                            Id = "e902b808-5285-4e58-b5ac-fb9e2f711d06",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-22T22:47:17.5773362+04:30\",\"t\":0}]",
                            Name = "زیتون کارگری"
                        },
                        new
                        {
                            Id = "1da89a67-308a-4d48-96da-bc90f243e837",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-22T22:47:17.5773362+04:30\",\"t\":0}]",
                            Name = "باهنر"
                        },
                        new
                        {
                            Id = "6766f4b7-df3b-4ab6-a1c5-0c5268d1d727",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-22T22:47:17.5773362+04:30\",\"t\":0}]",
                            Name = "کیان آباد"
                        },
                        new
                        {
                            Id = "d4530f24-618c-4dac-a331-eabfa0912be6",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-22T22:47:17.5773362+04:30\",\"t\":0}]",
                            Name = "کیانپارس"
                        },
                        new
                        {
                            Id = "01767e17-ea8e-4723-a7fb-629b1f8c205d",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-22T22:47:17.5773362+04:30\",\"t\":0}]",
                            Name = "ملیراه"
                        });
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Division", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Division");

                    b.HasData(
                        new
                        {
                            Id = "60d60d1e-b9c6-4eac-9388-2342de5e83f6",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-22T22:47:17.5773362+04:30\",\"t\":0}]",
                            Name = "املاک"
                        },
                        new
                        {
                            Id = "4c373207-e9b4-41f6-a6e2-f78c4e69039b",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-22T22:47:17.5773362+04:30\",\"t\":0}]",
                            Name = "کارواش"
                        });
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Employee", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<string>("Audit");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("Mobile")
                        .IsRequired();

                    b.Property<string>("Phone")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("Mobile")
                        .IsUnique();

                    b.ToTable("Employee");

                    b.HasData(
                        new
                        {
                            Id = "9a20d296-12f6-4f07-b00c-5a0ec3b2db61",
                            Address = "باهنر",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-22T22:47:17.5773362+04:30\",\"t\":0}]",
                            FirstName = "هانی",
                            LastName = "موسی زاده",
                            Mobile = "09166000341",
                            Phone = "33379367"
                        });
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.EmployeeDivision", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("DivisionId")
                        .IsRequired();

                    b.Property<string>("EmployeeId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("DivisionId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeDivision");

                    b.HasData(
                        new
                        {
                            Id = "037fe9ea-f8e2-4628-8b30-9a78298a1107",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-22T22:47:17.5773362+04:30\",\"t\":0}]",
                            DivisionId = "60d60d1e-b9c6-4eac-9388-2342de5e83f6",
                            EmployeeId = "9a20d296-12f6-4f07-b00c-5a0ec3b2db61"
                        });
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.EmployeeStatus", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("EmployeeId")
                        .IsRequired();

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeStatus");

                    b.HasData(
                        new
                        {
                            Id = "e5a9414f-5468-4f01-b845-501f07bb7a09",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-22T22:47:17.5773362+04:30\",\"t\":0}]",
                            EmployeeId = "9a20d296-12f6-4f07-b00c-5a0ec3b2db61",
                            Status = 0
                        });
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Facility", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Facility");

                    b.HasData(
                        new
                        {
                            Id = "cd1e4690-31f8-45ab-ae01-416caca98de8",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-22T22:47:17.5773362+04:30\",\"t\":0}]",
                            Name = "سالن بدنسازی"
                        },
                        new
                        {
                            Id = "8861edff-f54a-4c16-90f2-05e546426a58",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-22T22:47:17.5773362+04:30\",\"t\":0}]",
                            Name = "پارکینگ"
                        },
                        new
                        {
                            Id = "2e08b9ee-f9ae-4e5e-9f62-c4e234119b2c",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-22T22:47:17.5773362+04:30\",\"t\":0}]",
                            Name = "آسانسور"
                        },
                        new
                        {
                            Id = "67eb9a22-a082-48df-96ef-26acd55578b7",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-22T22:47:17.5773362+04:30\",\"t\":0}]",
                            Name = "سالن همایش"
                        },
                        new
                        {
                            Id = "4ec5b0c5-09e7-42bc-8112-f737d7e23cc5",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-22T22:47:17.5773362+04:30\",\"t\":0}]",
                            Name = "آنتن مرکزی"
                        });
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Feature", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("Feature");

                    b.HasData(
                        new
                        {
                            Id = "254b724f-47da-43b8-a610-19c366ba7bd4",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-22T22:47:17.5773362+04:30\",\"t\":0}]",
                            Name = "بر زمین",
                            Type = 1
                        },
                        new
                        {
                            Id = "e740fd67-f2d8-4155-9d14-6b1c73962286",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-22T22:47:17.5773362+04:30\",\"t\":0}]",
                            Name = "قیمت نهایی",
                            Type = 0
                        },
                        new
                        {
                            Id = "feefe3c2-a9b3-4c98-b530-6ebbb9d4a924",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-22T22:47:17.5773362+04:30\",\"t\":0}]",
                            Name = "بودجه",
                            Type = 2
                        },
                        new
                        {
                            Id = "988b025f-a470-4abf-b417-cbdc9f7be6f0",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-22T22:47:17.5773362+04:30\",\"t\":0}]",
                            Name = "متراژ",
                            Type = 1
                        },
                        new
                        {
                            Id = "aea4ba65-59ca-4047-ab51-287f2cdcd548",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-22T22:47:17.5773362+04:30\",\"t\":0}]",
                            Name = "پیش پرداخت",
                            Type = 2
                        },
                        new
                        {
                            Id = "b20e5e79-e855-49cd-8621-0cb2699783aa",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-22T22:47:17.5773362+04:30\",\"t\":0}]",
                            Name = "قیمت هر متر",
                            Type = 0
                        },
                        new
                        {
                            Id = "71e8168a-996f-4441-9c6e-2bc67596e760",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-22T22:47:17.5773362+04:30\",\"t\":0}]",
                            Name = "تعداد خواب",
                            Type = 1
                        },
                        new
                        {
                            Id = "fe1ffe43-8b9d-4400-9297-f368ffa4602a",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-22T22:47:17.5773362+04:30\",\"t\":0}]",
                            Name = "کرایه",
                            Type = 2
                        });
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.FixedSalary", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("EmployeeId")
                        .IsRequired();

                    b.Property<double>("Value");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("FixedSalary");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Insurance", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("Code");

                    b.Property<string>("EmployeeId")
                        .IsRequired();

                    b.Property<string>("Price");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Insurance");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Item", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("CategoryId")
                        .IsRequired();

                    b.Property<string>("Description");

                    b.Property<string>("PropertyId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PropertyId");

                    b.ToTable("Item");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.ItemFeature", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("FeatureId")
                        .IsRequired();

                    b.Property<string>("ItemId")
                        .IsRequired();

                    b.Property<string>("Value")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("FeatureId");

                    b.HasIndex("ItemId");

                    b.ToTable("ItemFeature");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Leave", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("EmployeeId")
                        .IsRequired();

                    b.Property<DateTime>("From");

                    b.Property<string>("Reason");

                    b.Property<DateTime>("To");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Leave");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.ManagementPercent", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("EmployeeId")
                        .IsRequired();

                    b.Property<int>("Percent");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("ManagementPercent");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Ownership", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("CustomerId")
                        .IsRequired();

                    b.Property<string>("Description");

                    b.Property<int>("Dong");

                    b.Property<string>("PropertyOwnershipId");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PropertyOwnershipId");

                    b.ToTable("Ownership");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Payment", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("EmployeeId")
                        .IsRequired();

                    b.Property<string>("Text");

                    b.Property<int>("Type");

                    b.Property<double>("Value");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Picture", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("CheckId");

                    b.Property<string>("DealId");

                    b.Property<string>("DealPaymentId");

                    b.Property<string>("EmployeeId");

                    b.Property<string>("File")
                        .IsRequired();

                    b.Property<string>("PaymentId");

                    b.Property<string>("PropertyId");

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.HasIndex("CheckId");

                    b.HasIndex("DealId");

                    b.HasIndex("DealPaymentId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("PropertyId");

                    b.ToTable("Picture");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Presence", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<int>("Day");

                    b.Property<string>("EmployeeId")
                        .IsRequired();

                    b.Property<int>("Hour");

                    b.Property<int>("Minute");

                    b.Property<int>("Month");

                    b.Property<int>("Status");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Presence");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Property", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Alley");

                    b.Property<string>("Audit");

                    b.Property<string>("BuildingName");

                    b.Property<string>("CategoryId");

                    b.Property<string>("Description");

                    b.Property<string>("DistrictId")
                        .IsRequired();

                    b.Property<int>("Flat");

                    b.Property<int>("Floor");

                    b.Property<IPoint>("Geolocation");

                    b.Property<string>("Number");

                    b.Property<string>("Street")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DistrictId");

                    b.ToTable("Property");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.PropertyFacility", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("FacilityId")
                        .IsRequired();

                    b.Property<string>("PropertyId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("FacilityId");

                    b.HasIndex("PropertyId");

                    b.ToTable("PropertyFacility");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.PropertyFeature", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("FeatureId")
                        .IsRequired();

                    b.Property<string>("PropertyId")
                        .IsRequired();

                    b.Property<string>("Value")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("FeatureId");

                    b.HasIndex("PropertyId");

                    b.ToTable("PropertyFeature");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.PropertyOwnership", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("PropertyId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("PropertyOwnership");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Reminder", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AlarmTime");

                    b.Property<string>("Audit");

                    b.Property<string>("Text");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Reminder");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Sms", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("CustomerId");

                    b.Property<string>("EmployeeId");

                    b.Property<int>("Provider");

                    b.Property<string>("Receiver");

                    b.Property<string>("ReferenceId");

                    b.Property<string>("Sender");

                    b.Property<string>("StatusJson");

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Sms");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("EmployeeId")
                        .IsRequired();

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<int>("Role");

                    b.Property<string>("Username")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = "3cb11853-33dc-44b9-a2bc-6026bbbc9887",
                            Audit = "[{\"i\":null,\"n\":\"آرش شبه\",\"m\":\"09364091209\",\"d\":\"2019-04-22T22:47:17.5773362+04:30\",\"t\":0}]",
                            EmployeeId = "9a20d296-12f6-4f07-b00c-5a0ec3b2db61",
                            Password = "YmAdyc6Ph9PNcJOLeira6w==",
                            Role = 2,
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.UserItemCategory", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("CategoryId")
                        .IsRequired();

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("UserItemCategory");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.UserPropertyCategory", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audit");

                    b.Property<string>("CategoryId")
                        .IsRequired();

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPropertyCategory");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Applicant", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Customer", "Customer")
                        .WithMany("Applicants")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RealEstate.Services.Database.Tables.Item", "Item")
                        .WithMany("Applicants")
                        .HasForeignKey("ItemId");

                    b.HasOne("RealEstate.Services.Database.Tables.User", "User")
                        .WithMany("Applicants")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.ApplicantFeature", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Applicant", "Applicant")
                        .WithMany("ApplicantFeatures")
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RealEstate.Services.Database.Tables.Feature", "Feature")
                        .WithMany("ApplicantFeatures")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Beneficiary", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Deal", "Deal")
                        .WithMany("Beneficiaries")
                        .HasForeignKey("DealId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RealEstate.Services.Database.Tables.User", "User")
                        .WithMany("Beneficiaries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Check", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Deal", "Deal")
                        .WithMany("Checks")
                        .HasForeignKey("DealId");

                    b.HasOne("RealEstate.Services.Database.Tables.Reminder", "Reminder")
                        .WithMany("Checks")
                        .HasForeignKey("ReminderId");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.DealPayment", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Deal", "Deal")
                        .WithMany("DealPayments")
                        .HasForeignKey("DealId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.DealRequest", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Deal", "Deal")
                        .WithOne("DealRequest")
                        .HasForeignKey("RealEstate.Services.Database.Tables.DealRequest", "DealId");

                    b.HasOne("RealEstate.Services.Database.Tables.Item", "Item")
                        .WithMany("DealRequests")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.EmployeeDivision", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Division", "Division")
                        .WithMany("EmployeeDivisions")
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RealEstate.Services.Database.Tables.Employee", "Employee")
                        .WithMany("EmployeeDivisions")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.EmployeeStatus", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Employee", "Employee")
                        .WithMany("EmployeeStatuses")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.FixedSalary", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Employee", "Employee")
                        .WithMany("FixedSalaries")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Insurance", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Employee", "Employee")
                        .WithMany("Insurances")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Item", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Category", "Category")
                        .WithMany("Items")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RealEstate.Services.Database.Tables.Property", "Property")
                        .WithMany("Items")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.ItemFeature", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Feature", "Feature")
                        .WithMany("ItemFeatures")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RealEstate.Services.Database.Tables.Item", "Item")
                        .WithMany("ItemFeatures")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Leave", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Employee", "Employee")
                        .WithMany("Leaves")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.ManagementPercent", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Employee", "Employee")
                        .WithMany("ManagementPercents")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Ownership", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Customer", "Customer")
                        .WithMany("Ownerships")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RealEstate.Services.Database.Tables.PropertyOwnership", "PropertyOwnership")
                        .WithMany("Ownerships")
                        .HasForeignKey("PropertyOwnershipId");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Payment", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Employee", "Employee")
                        .WithMany("Payments")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Picture", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Check", "Check")
                        .WithMany("Pictures")
                        .HasForeignKey("CheckId");

                    b.HasOne("RealEstate.Services.Database.Tables.Deal", "Deal")
                        .WithMany("Pictures")
                        .HasForeignKey("DealId");

                    b.HasOne("RealEstate.Services.Database.Tables.DealPayment", "DealPayment")
                        .WithMany("Pictures")
                        .HasForeignKey("DealPaymentId");

                    b.HasOne("RealEstate.Services.Database.Tables.Employee", "Employee")
                        .WithMany("Pictures")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("RealEstate.Services.Database.Tables.Payment", "Payment")
                        .WithMany("Pictures")
                        .HasForeignKey("PaymentId");

                    b.HasOne("RealEstate.Services.Database.Tables.Property", "Property")
                        .WithMany("Pictures")
                        .HasForeignKey("PropertyId");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Presence", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Employee", "Employee")
                        .WithMany("Presences")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Property", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Category", "Category")
                        .WithMany("Properties")
                        .HasForeignKey("CategoryId");

                    b.HasOne("RealEstate.Services.Database.Tables.District", "District")
                        .WithMany("Properties")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.PropertyFacility", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Facility", "Facility")
                        .WithMany("PropertyFacilities")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RealEstate.Services.Database.Tables.Property", "Property")
                        .WithMany("PropertyFacilities")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.PropertyFeature", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Feature", "Feature")
                        .WithMany("PropertyFeatures")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RealEstate.Services.Database.Tables.Property", "Property")
                        .WithMany("PropertyFeatures")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.PropertyOwnership", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Property", "Property")
                        .WithMany("PropertyOwnerships")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Reminder", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.User", "User")
                        .WithMany("Reminders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.Sms", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Customer", "Customer")
                        .WithMany("Smses")
                        .HasForeignKey("CustomerId");

                    b.HasOne("RealEstate.Services.Database.Tables.Employee", "Employee")
                        .WithMany("Smses")
                        .HasForeignKey("EmployeeId");
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.User", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Employee", "Employee")
                        .WithMany("Users")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.UserItemCategory", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Category", "Category")
                        .WithMany("UserItemCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RealEstate.Services.Database.Tables.User", "User")
                        .WithMany("UserItemCategories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RealEstate.Services.Database.Tables.UserPropertyCategory", b =>
                {
                    b.HasOne("RealEstate.Services.Database.Tables.Category", "Category")
                        .WithMany("UserPropertyCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RealEstate.Services.Database.Tables.User", "User")
                        .WithMany("UserPropertyCategories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
