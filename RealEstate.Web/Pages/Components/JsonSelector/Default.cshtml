@model JsonSelectorViewModel

@if (Model?.SelectListItems?.Any() == true)
{
    <div class="row justify-content-center align-items-center">
        <div class="col-12">
            <div class="widget mini-widget">
                <widget-header title="@Model.LocalizerName"></widget-header>
                <section class="container-fluid">
                    <div class="row">
                        <div class="col-12 @Model.WrapperClass">
                            <div class="itemShow adder">
                                <div class="detail">
                                    <div class="info">
                                        <span>
                                            <div class="row">
                                                <div class="col-5">
                                                    <select class="form-control d-inline-block" id="@Model.SelectId" asp-items="@Model.SelectListItems"></select>
                                                </div>
                                            </div>
                                        </span>
                                    </div>
                                    <div class="button">
                                        <button type="button" class="btn btn-sm btn-success btn-block" id="@Model.ButtonId">@Model.LocalizerButtonName</button>
                                    </div>
                                </div>
                            </div>
                            <div class="items"></div>
                        </div>
                    </div>
                </section>
            </div>
        </div>
    </div>

    <script asp-cut-key="@Model.ScriptKey">
        $(document).ready(function() {

            const jsonInput = $("#@Model.Json");
            const wrapperClass = $(".@Model.WrapperClass");
            const selectInput = $("#@Model.SelectId");
            const submitInput = $("#@Model.ButtonId");
            const itemSelector = "@Model.ItemSelectorClass";

            $(jsonInput).change(function() {

                const adder = $("> .adder", wrapperClass);
                const items = $("> .items", wrapperClass);
                $(items).empty();

                if ($(jsonInput).val() === "") {
                    $(jsonInput).val("[]");
                }

                const jsonString = $(jsonInput).val();
                const json = $.parseJSON(jsonString);

                $.each(json,
                    (index, item) => {

                        const key = item.@Model.IdProperty;
                        const name = item.@Model.NameProperty;

                        const anchor = document.createElement("a");
                        $(anchor).attr("href", "#");
                        $(anchor).attr("data-id", key);
                        $(anchor).addClass("btn btn-warning");
                        $(anchor).addClass(itemSelector);
                        $(anchor).addClass("m-1");
                        $(anchor).attr("data-confirm", "@Html.Raw(SharedLocalizer["AreYouSureToDoThisRequest"])");

                        const nameElement = document.createElement("span");
                        $(nameElement).html(name);

                        $(anchor).append(nameElement);
                        $(items).append(anchor);

                    });

                $.each(selectInput.children(),
                    (index, item) => {
                        const name = $(item).text();
                        const key = $(item).val();
                        const i = json.findIndex(
                            obj => obj.@Model.IdProperty === key);
                        if (i >= 0) {
                            $(item).addClass("hidden");
                        } else {
                            $(item).removeClass("hidden");
                        }

                    });

                if ($('option:not(.hidden)', selectInput).length > 0) {
                    $('option:not(.hidden):eq(0)', selectInput).prop('selected', true);
                    $(adder).fadeIn("slow");
                } else {
                    $(adder).fadeOut("slow");
                }
            });

            $(submitInput).click(function(e) {

                if ($(selectInput).children().length > 0) {
                    let selected = $(selectInput).find('option:selected:eq(0)')[0];
                    if (selected === undefined || selected === null) {
                        selected = $(selectInput).find('option:eq(0)')[0];
                    }
                    const keyId = $(selected).attr("value");
                    const keyName = $(selected).text();

                    if (keyId === undefined || keyId === null)
                        return;

                    const newItem = {
                        @Model.IdProperty: keyId,
                        @Model.NameProperty: keyName
                    };
                    addJson(jsonInput, newItem, obj => obj.@Model.IdProperty === newItem.@Model.IdProperty);
                }
            });

            $(document).on("click",
                `.${itemSelector}`,
                function (e) {
                    e.preventDefault();
                    removeButtonEvent(jsonInput, this);
                });

            $(jsonInput).trigger("change");

        });
    </script>
}