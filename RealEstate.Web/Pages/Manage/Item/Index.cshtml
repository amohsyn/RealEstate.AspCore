@page
@model IndexModel
@{
    const string defaultFinalPriceFeatureId = "54a0b920-c17f-4ff2-9c51-f9551159026a";
    const string defaultFinalPriceFeatureName = "قیمت نهایی";

    const string defaultMetersFeatureId = "15bf9d15-07bc-4f3c-8339-8192c8fd0c18";
    const string defaultMetersFeatureName = "متراژ";

    var districts = await LocationService.DistrictListAsync().ConfigureAwait(false);
    var districtsSelect = districts?.Select(x => new SelectListItem
    {
        Text = x.Name,
        Value = x.Name
    }).AddNone();

    var features = await FeatureService.FeatureListAsync(FeatureTypeEnum.Item, FeatureTypeEnum.Property).ConfigureAwait(false);
    var featuresSelect = features?.Select(x => new SelectListItem
    {
        Text = x.Name,
        Value = x.Id
    }).AddNone();

    var facilities = await FeatureService.FacilityListAsync().ConfigureAwait(false);
    var facilitiesSelect = facilities?.Select(x => new SelectListItem
    {
        Text = x.Name,
        Value = x.Name
    }).AddNone();

    var itemCategorieslist = await FeatureService.CategoryListAsync(CategoryTypeEnum.Item, false).ConfigureAwait(false);
    var itemCategories = (itemCategorieslist?.Select(x => new SelectListItem
    {
        Value = x.Name,
        Text = x.Name,
        Selected = Model.SearchInput?.ItemCategory == x.Name
    }).ToList()).AddNone();

    var propertyCategorieslist = await FeatureService.CategoryListAsync(CategoryTypeEnum.Property, false).ConfigureAwait(false);
    var propertyCategories = (propertyCategorieslist?.Select(x => new SelectListItem
    {
        Value = x.Name,
        Text = x.Name,
        Selected = Model.SearchInput?.PropertyCategory == x.Name
    }).ToList()).AddNone();

}
<status>
    @Model.Status
</status>
<div class="col-12">

    <div class="widget">
        <widget-header title="@Model.PageTitle">
            @if (User.IsInRole(Role.SuperAdmin.ToString()))
            {
                <a asp-page="@typeof(IndexModel).Page()" asp-route-removeDuplicates="true">@SharedLocalizer[SharedResource.CleanDuplicateItems]</a>
            }
            <a asp-page="@typeof(CheckModel).Page()">@SharedLocalizer[SharedResource.NewItem]</a>
        </widget-header>
        <section class="container-fluid">
            <search-nav rows="@Model.List.Rows" searchModel="@Model.SearchInput">
                @*<li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" data-toggle="dropdown" href="#" role="button" aria-haspopup="true" aria-expanded="false">@SharedLocalizer[SharedResource.SortBy] - @SharedLocalizer[SharedResource.Newest]</a>
                    <div class="dropdown-menu">
                        <button type="button" class="dropdown-item sorter active" data-sort-by="creationDate" data-sort-ascending="false">@SharedLocalizer[SharedResource.Newest]</button>
                        <button type="button" class="dropdown-item sorter" data-sort-by="creationDate" data-sort-ascending="true">@SharedLocalizer[SharedResource.Oldest]</button>
                    </div>
                </li>
                <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" data-toggle="dropdown" href="#" role="button" aria-haspopup="true" aria-expanded="false">قیمت نهایی</a>
                    <div class="dropdown-menu">
                        <button type="button" class="dropdown-item sorter active">@SharedLocalizer[SharedResource.Cancel]</button>
                        <div class="dropdown-divider"></div>
                        <button type="button" class="dropdown-item sorter" data-sort-by="finalPrice" data-sort-ascending="true">@SharedLocalizer[SharedResource.Lowest]</button>
                        <button type="button" class="dropdown-item sorter" data-sort-by="finalPrice" data-sort-ascending="false">@SharedLocalizer[SharedResource.Greatest]</button>
                    </div>
                </li>
                <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" data-toggle="dropdown" href="#" role="button" aria-haspopup="true" aria-expanded="false">قیمت هر متر</a>
                    <div class="dropdown-menu">
                        <button type="button" class="dropdown-item sorter active">@SharedLocalizer[SharedResource.Cancel]</button>
                        <div class="dropdown-divider"></div>
                        <button type="button" class="dropdown-item sorter" data-sort-by="pricePerMeter" data-sort-ascending="true">@SharedLocalizer[SharedResource.Lowest]</button>
                        <button type="button" class="dropdown-item sorter" data-sort-by="pricePerMeter" data-sort-ascending="false">@SharedLocalizer[SharedResource.Greatest]</button>
                    </div>
                </li>
                <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" data-toggle="dropdown" href="#" role="button" aria-haspopup="true" aria-expanded="false">متراژ</a>
                    <div class="dropdown-menu">
                        <button type="button" class="dropdown-item sorter active">@SharedLocalizer[SharedResource.Cancel]</button>
                        <div class="dropdown-divider"></div>
                        <button type="button" class="dropdown-item sorter" data-sort-by="meters" data-sort-ascending="true">@SharedLocalizer[SharedResource.Lowest]</button>
                        <button type="button" class="dropdown-item sorter" data-sort-by="meters" data-sort-ascending="false">@SharedLocalizer[SharedResource.Greatest]</button>
                    </div>
                </li>
                <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" data-toggle="dropdown" href="#" role="button" aria-haspopup="true" aria-expanded="false">تعداد خواب</a>
                    <div class="dropdown-menu">
                        <button type="button" class="dropdown-item sorter active">@SharedLocalizer[SharedResource.Cancel]</button>
                        <div class="dropdown-divider"></div>
                        <button type="button" class="dropdown-item sorter" data-sort-by="bedRooms" data-sort-ascending="true">@SharedLocalizer[SharedResource.Lowest]</button>
                        <button type="button" class="dropdown-item sorter" data-sort-by="bedRooms" data-sort-ascending="false">@SharedLocalizer[SharedResource.Greatest]</button>
                    </div>
                </li>
                <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" data-toggle="dropdown" href="#" role="button" aria-haspopup="true" aria-expanded="false">سال ساخت</a>
                    <div class="dropdown-menu">
                        <button type="button" class="dropdown-item sorter active">@SharedLocalizer[SharedResource.Cancel]</button>
                        <div class="dropdown-divider"></div>
                        <button type="button" class="dropdown-item sorter" data-sort-by="buildYear" data-sort-ascending="false">@SharedLocalizer[SharedResource.Lowest]</button>
                        <button type="button" class="dropdown-item sorter" data-sort-by="buildYear" data-sort-ascending="true">@SharedLocalizer[SharedResource.Greatest]</button>
                    </div>
                </li>*@
            </search-nav>
        </section>
        <section class="container-fluid grid">
            <item-viewer model="@Model.List.Items">
                <div class="row">
                    @foreach (var item in Model.List.Items)
                    {
                        var disabledClass = item.IsDeleted ? "disabled" : "";
                        var disabledTerm = item.IsDeleted ? SharedLocalizer[SharedResource.Undelete] : SharedLocalizer[SharedResource.Delete];
                        var category = item.Category;
                        var finalPrice = item.ItemFeatures?.FirstOrDefault(x => x.Feature?.Name == "قیمت نهایی")?.Value.Replace(",", "").Replace("/", "") ?? "0";
                        var pricePerMeter = item.ItemFeatures?.FirstOrDefault(x => x.Feature?.Name == "قیمت هر متر")?.Value.Replace(",", "").Replace("/", "") ?? "0";
                        var meters = item.Property.PropertyFeatures?.FirstOrDefault(x => x.Feature?.Name == "متراژ")?.Value.Replace(",", "").Replace("/", "") ?? "0";
                        var bedRooms = item.Property.PropertyFeatures?.FirstOrDefault(x => x.Feature?.Name == "تعداد خواب")?.Value.Replace(",", "").Replace("/", "") ?? "0";
                        var buildYear = item.Property.PropertyFeatures?.FirstOrDefault(x => x.Feature?.Name == "سال ساخت")?.Value.Replace(",", "").Replace("/", "") ?? "0";
                        var imgPath = Url.Content($"~/{FileHandler.ImgDirectory}/{item.Property?.Pictures?.SelectRandom()?.File}");
                        var hasImage = item.Property?.Pictures?.Any() == true;

                        <div class="col-12 col-sm-6 col-xl-3 items--item-wrapper element-item @disabledClass" data-creationDate="@item.Logs.Create.DateTime.ToString(" s", new CultureInfo("en-US"))" data-finalPrice="@finalPrice" data-pricePerMeter="@pricePerMeter" data-meters="@meters" data-bedRooms="@bedRooms" data-buildYear="@buildYear">
                            <div class="items--item">
                                <a href="#" data-toggle="modal" data-target="#itemDetailModal" data-item-id="@item.Id">
                                    <div class="picture @(!hasImage ? " no-img" : "" )" @(Html.Raw(hasImage ? $"style=\"background-image: url('{Url.Content(imgPath)}')\"" : ""))>
                                        <div class="fadeIn">
                                            <span>
                                                <i class="fa fa-map-marker"></i>
                                                <span>@item.Property.District.Name</span>
                                            </span>
                                            <span class="mr-auto">
                                                @item.Category.Name • @item.Property.Category.Name
                                            </span>
                                        </div>
                                    </div>
                                    <ul class="features">
                                        <li>
                                            @Html.Raw(item.Property.Address)
                                        </li>
                                        @{
                                            var neededFeatures = new List
                                                <string>
                                                                                                                                                            {
                                                "قیمت نهایی",
                                                "قیمت هر متر",
                                                "پیش پرداخت",
                                                "اجاره"
                                            };
                                            var workingFeatures = item.ItemFeatures?.Where(x => x.Feature != null && !string.IsNullOrEmpty(x.Feature.Name) && neededFeatures?.Any(c => c == x.Feature?.Name) == true).OrderBy(x => neededFeatures.IndexOf(x.Feature.Name)).ToList();
                                        }
                                        @if (workingFeatures?.Any() == true)
                                        {
                                            foreach (var wFeature in workingFeatures)
                                            {
                                                var (key, value, hasDate) = wFeature.Feature.Name.NormalizeUiFeature(wFeature.Value);
                                                var originalValue = wFeature.OriginalValue;

                                                <li class="@(key?.Equals(" قیمت نهایی", StringComparison.CurrentCultureIgnoreCase) == true ? "feature-important" : "" )">
                                                    @if (!string.IsNullOrEmpty(key))
                                                    {
                                                        <b>@key</b>
                                                    }
                                                    <span>@Html.Raw(value)</span>
                                                    @if (hasDate)
                                                    {
                                                        <span class="text-black-50">تا تاریخ @wFeature.Logs.Last.DateTime.GregorianToPersian(true)</span>
                                                    }
                                                </li>
                                            }
                                        }
                                    </ul>
                                </a>
                                <ul class="featureCards mt-auto">
                                    @{
                                        var neededFeatures2 = new List<string>(){
                                        "متراژ",
                                        "تعداد خواب",
                                        "سال ساخت"
                                        };
                                        var workingFeatures2 = item.Property.PropertyFeatures?.Where(x => x.Feature != null && !string.IsNullOrEmpty(x.Feature.Name) && neededFeatures2?.Any(c => c == x.Feature?.Name) == true).OrderBy(x => neededFeatures2.IndexOf(x.Feature.Name)).ToList();
                                    }
                                    @if (workingFeatures2?.Any() == true)
                                    {
                                        foreach (var wFeature in workingFeatures2)
                                        {
                                            var (key, value, hasDate) = wFeature.Feature.Name.NormalizeUiFeature(wFeature.Value);
                                            var originalValue = wFeature.OriginalValue;

                                            var icon = string.Empty;
                                            switch (key)
                                            {
                                                case "تعداد خواب":
                                                    icon = "bed";
                                                    break;
                                                case "سال ساخت":
                                                    icon = "hashtag";
                                                    value = value.Replace(" ساخت", "");
                                                    break;

                                                case "متراژ":
                                                    icon = "ruler";
                                                    break;
                                            }
                                            <li>
                                                <i class="fa fa-@icon"></i>
                                                <span>@Html.Raw(value)</span>
                                            </li>
                                        }
                                    }
                                    @if (item.IsNegotiable)
                                    {
                                        <li class="mr-auto">
                                            <i class="fa fa-check text-green"></i>
                                            <span>@SharedLocalizer[SharedResource.Negotitable]</span>
                                        </li>
                                    }
                                </ul>
                                <ul class="row admin-keys mt-auto">
                                    <li class="col">
                                        <a asp-page="@typeof(PictureModel).Page()" asp-route-id="@item.Property?.Id" target="_blank" class="col btn-sm @disabledClass">@SharedLocalizer[SharedResource.UploadPhotos]</a>
                                    </li>
                                    @if (User.IsInRole(Role.SuperAdmin.ToString()) || User.IsInRole(Role.Admin.ToString()))
                                    {
                                        <li class="col">
                                            <a asp-page="@typeof(AddModel).Page()" asp-route-id="@item.Id" target="_blank" class="col btn-sm @disabledClass">@SharedLocalizer["EditItem"]</a>
                                        </li>
                                        <li class="col">

                                            <a asp-controller="Remove" asp-action="ItemAsync" asp-route-id="@item.Id" data-confirm="@SharedLocalizer[SharedResource.AreYouSureToDoThisRequest]" class="col btn-sm text-danger">@disabledTerm</a>
                                        </li>
                                    }
                                </ul>
                            </div>
                        </div>
                    }
                </div>
            </item-viewer>
        </section>
        <section class="container-fluid">
            <vc:pagination model="@Model.List" />
        </section>
    </div>
</div>
<search-modal searchModel="@Model.SearchInput">
    <hr subject="@SharedLocalizer[SharedResource.Category]" />
    <div class="row justify-content-center align-items-center">
        <div class="col-12 col-md">
            <div class="input-wrapper">
                <label class="control-label" asp-for="SearchInput.ItemCategory"></label>
                <select asp-items="itemCategories" asp-for="SearchInput.ItemCategory" class="custom-select"></select>
            </div>
        </div>
        <div class="col-12 col-md">
            <div class="input-wrapper">
                <label class="control-label" asp-for="SearchInput.PropertyCategory"></label>
                <select asp-items="propertyCategories" asp-for="SearchInput.PropertyCategory" class="custom-select"></select>
            </div>
        </div>
    </div>
    <hr subject="محل ملک" />
    <div class="row justify-content-center align-items-center">
        <div class="col-12 col-md">
            <div class="input-wrapper">
                <label class="control-label" asp-for="SearchInput.District"></label>
                <select asp-items="districtsSelect" asp-for="SearchInput.District" class="custom-select"></select>
            </div>
        </div>
        <div class="col-12 col-md">
            <div class="input-wrapper">
                <label class="control-label" asp-for="SearchInput.Street"></label>
                <input asp-for="SearchInput.Street" class="form-control" />
            </div>
        </div>
    </div>
    <hr subject="@SharedLocalizer[SharedResource.Ownership]" />
    <div class="row justify-content-center align-items-center">
        <div class="col-12 col-md">
            <div class="input-wrapper">
                <label class="control-label" asp-for="SearchInput.Owner"></label>
                <input asp-for="SearchInput.Owner" class="form-control" />
            </div>
        </div>
        <div class="col-12 col-md">
            <div class="input-wrapper">
                <label class="control-label" asp-for="SearchInput.OwnerMobile"></label>
                <input asp-for="SearchInput.OwnerMobile" class="form-control" />
            </div>
        </div>
    </div>

    @if (features?.Any() == true)
    {
        <hr />
        <div class="row justify-content-center align-items-center">
            <div class="col-12" id="features-wrapper">
                <div class="itemShow adder input-wrapper">
                    <input asp-for="SearchInput.FeaturesJson" />
                    <label class="control-label">@SharedLocalizer[SharedResource.Features]</label>
                    <select asp-items="featuresSelect" id="features-select" class="custom-select"></select>
                    <label class="control-label">@SharedLocalizer[SharedResource.FromEqual]</label>
                    <input class="form-control" id="featureFrom" />
                    <label class="control-label">@SharedLocalizer[SharedResource.To]</label>
                    <input class="form-control" id="featureTo" />
                    <input type="button" id="addNewFeature" class="btn btn-warning btn-sm" value="@SharedLocalizer[SharedResource.Add]" />
                </div>
                <div class="items hidden"></div>
            </div>
        </div>
        <hr subject="مبلغ های پیش فرض" />
        <a href="#" data-feature-name="@defaultFinalPriceFeatureName" data-feature-id="@defaultFinalPriceFeatureId" data-feature-from="" data-feature-to="200000000" class="badge badge-secondary feature-default">زیر 200 میلیون تومان</a>
        <a href="#" data-feature-name="@defaultFinalPriceFeatureName" data-feature-id="@defaultFinalPriceFeatureId" data-feature-from="200000000" data-feature-to="300000000" class="badge badge-secondary feature-default">بین 200 تا 300 میلیون تومان</a>
        <a href="#" data-feature-name="@defaultFinalPriceFeatureName" data-feature-id="@defaultFinalPriceFeatureId" data-feature-from="300000000" data-feature-to="500000000" class="badge badge-secondary feature-default">بین 300 تا 500 میلیون تومان</a>
        <a href="#" data-feature-name="@defaultFinalPriceFeatureName" data-feature-id="@defaultFinalPriceFeatureId" data-feature-from="500000000" data-feature-to="700000000" class="badge badge-secondary feature-default">بین 500 تا 700 میلیون تومان</a>
        <a href="#" data-feature-name="@defaultFinalPriceFeatureName" data-feature-id="@defaultFinalPriceFeatureId" data-feature-from="700000000" data-feature-to="1000000000" class="badge badge-secondary feature-default">بین 700 تا یک میلیارد تومان</a>
        <a href="#" data-feature-name="@defaultFinalPriceFeatureName" data-feature-id="@defaultFinalPriceFeatureId" data-feature-from="1000000000" data-feature-to="" class="badge badge-secondary feature-default">بالای 1 میلیارد تومان</a>
        <hr subject="متراژ های پیش فرض" />
        <a href="#" data-feature-name="@defaultMetersFeatureName" data-feature-id="@defaultMetersFeatureId" data-feature-from="" data-feature-to="70" class="badge badge-secondary feature-default">زیر 70 متر</a>
        <a href="#" data-feature-name="@defaultMetersFeatureName" data-feature-id="@defaultMetersFeatureId" data-feature-from="70" data-feature-to="90" class="badge badge-secondary feature-default">بین 70 تا 90 متر</a>
        <a href="#" data-feature-name="@defaultMetersFeatureName" data-feature-id="@defaultMetersFeatureId" data-feature-from="90" data-feature-to="120" class="badge badge-secondary feature-default">بین 90 تا 120 متر</a>
        <a href="#" data-feature-name="@defaultMetersFeatureName" data-feature-id="@defaultMetersFeatureId" data-feature-from="120" data-feature-to="150" class="badge badge-secondary feature-default">بین 120 تا 150 متر</a>
        <a href="#" data-feature-name="@defaultMetersFeatureName" data-feature-id="@defaultMetersFeatureId" data-feature-from="150" data-feature-to="" class="badge badge-secondary feature-default">بالای 150 متر</a>
    }
    @if (facilities?.Any() == true)
    {
        <hr />
        <div class="row justify-content-center align-items-center">
            <div class="col-12" id="facilities-wrapper">
                <div class="itemShow adder input-wrapper">
                    <input asp-for="SearchInput.FacilitiesJson" />
                    <label class="control-label">@SharedLocalizer[SharedResource.Facilities]</label>
                    <select asp-items="facilitiesSelect" id="facility-select" class="custom-select"></select>
                    <input type="button" id="addNewFacility" class="btn btn-warning btn-sm" value="@SharedLocalizer[SharedResource.Add]" />
                </div>
                <div class="items hidden"></div>
            </div>
        </div>
    }
    <hr />
    <div class="row justify-content-center align-items-center">
        <div class="col-12 col-lg">
            <div class="custom-control custom-switch" dir="rtl">
                <input type="checkbox" class="custom-control-input" asp-for="@Model.SearchInput.IsNegotiable">
                <label class="custom-control-label" asp-for="@Model.SearchInput.IsNegotiable"></label>
            </div>
        </div>
        <div class="col-12 col-lg">
            <div class="custom-control custom-switch" dir="rtl">
                <input type="checkbox" class="custom-control-input" asp-for="@Model.SearchInput.HasPicture">
                <label class="custom-control-label" asp-for="@Model.SearchInput.HasPicture"></label>
            </div>
        </div>
    </div>
</search-modal>
<div class="modal fade animate" id="itemDetailModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLongTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content animate-bottom">
        </div>
    </div>
</div>
@section Styles
{
    <link rel="stylesheet" href="~/css/jquery.bsPhotoGallery-min.css" asp-append-version="true" />
}
@section Scripts
{
    <script src="~/js/jquery.bsPhotoGallery-min.js" asp-append-version="true"></script>
    <script>
        $(document).ready(function() {

            const detailModal = "#itemDetailModal";

            $(detailModal).on('show.bs.modal',
                function (event) {
                    const button = $(event.relatedTarget); // Button that triggered the modal
                    const itemId = button.data('item-id'); // Extract info from data-* attributes
                    const modal = $(this);

                    $.get("@Url.Action("Item", "Detail")", { id: itemId }).then(function(response) {
                        console.log(response);
                        if (response != null) {
                            modal.find('.modal-content').html(response);
                        }
                    });

                    const opts = {
                        "classes": "",
                        "hasModal": true
                    }
                    $('.gallery').bsPhotoGallery(opts);
                });
        });
    </script>
    <script>
        $(document).ready(function () {
            $('#searchModal').modal('handleUpdate');
        });
    </script>
    <script>
        $(document).ready(function() {

            const jsonInput = $("#@nameof(Model.SearchInput)_@nameof(Model.SearchInput.FacilitiesJson)");
            const selectInput = $("#facility-select");
            const wrapperClass = $("#facilities-wrapper");
            const submitInput = $("#addNewFacility");
            const itemSelector = "facility-item";

            $(jsonInput).change(function() {

                const adder = $("> .adder", wrapperClass);
                const items = $("> .items", wrapperClass);
                $(items).empty();

                const json = $(jsonInput).val();
                if (json === "" || json === null) {
                    $(jsonInput).val("[]");
                }
                const jsonObject = $.parseJSON(json === "" ? "[]" : json);

                if (jsonObject.length > 0) {
                    $(items).removeClass("hidden");
                } else {
                    $(items).addClass("hidden");
                }

                $.each(jsonObject,
                    (index, item) => {

                        const name = item
                            .@(PropertyExtensions.GetJsonProperty<ItemFacilityJsonViewModel>(x => x.Name));

                        const anchor = document.createElement("a");
                        $(anchor).attr("href", "#");
                        $(anchor).attr("data-id", name);
                        $(anchor).addClass(itemSelector);

                        const nameElement = document.createElement("span");
                        $(nameElement).html(name);

                        $(anchor).append(nameElement);
                        $(items).append(anchor);

                    });

                $.each(selectInput.children(":not([value='---'])"),
                    (index, item) => {
                        const id = $(item).val();
                        const i = jsonObject.findIndex(
                            obj => obj.@(PropertyExtensions.GetJsonProperty<ItemFacilityJsonViewModel>(x => x.Name)) ===
                            id);
                        if (i >= 0) {
                            $(item).addClass("hidden");
                        } else {
                            $(item).removeClass("hidden");
                        }

                    });

                const availableItems = $('option:not(.hidden):not([value=""])', selectInput);
                console.log("Available items", availableItems);
                if ($(availableItems).length > 0) {
                    $('option:not(.hidden):eq(0)', selectInput).prop('selected', true);
                    $(adder).fadeIn("slow");
                } else {
                    $(adder).fadeOut("slow");
                }

            });

            $(submitInput).click(function(e) {
                let selected = $(selectInput).find('option:selected:not([value="---"]):eq(0)')[0];
                if (selected === undefined || selected === null) {
                    selected = $(selectInput).find('option:eq(0)')[0];
                }
                const keyId = $(selected).attr("value");
                const keyName = $(selected).text();

                if (keyName === "---")
                    return;

                if (keyId === undefined || keyId === null)
                    return;

                const newItem = {
                    @(PropertyExtensions.GetJsonProperty<ItemFacilityJsonViewModel>(x => x.Name)): keyName
                };

                addJson(jsonInput,
                    newItem,
                    obj => obj.@(PropertyExtensions.GetJsonProperty<ItemFacilityJsonViewModel>(x => x.Name)) ===
                    newItem.@(PropertyExtensions.GetJsonProperty<ItemFacilityJsonViewModel>(x => x.Name)));

            });

            $(document).on("click",
                `.${itemSelector}`,
                function(e) {
                    const keyId = $(this).attr("data-id");
                    console.log("KeyId", keyId);

                    const jsonValue = $.parseJSON($(jsonInput).val());
                    console.log("JsonValue", jsonValue);

                    const index =
                        jsonValue.findIndex(prop => prop
                            .@(PropertyExtensions.GetJsonProperty<ItemFacilityJsonViewModel>(x => x.Name)) ===
                            keyId);
                    console.log("Index", index);

                    removeJson(jsonInput, index);
                    $(this).remove();
                    console.log("Button Triggered to Remove Item", this);
                });

            $(jsonInput).trigger("change");

        });
    </script>
    <script>
        $(document).ready(function() {

            const jsonInput = $("#@nameof(Model.SearchInput)_@nameof(Model.SearchInput.FeaturesJson)");
            const selectInput = $("#features-select");
            const wrapperClass = $("#features-wrapper");
            const submitInput = $("#addNewFeature");
            const fromInput = $("#featureFrom");
            const toInput = $("#featureTo");
            const itemSelector = "feature-item";

            $(jsonInput).change(function() {

                const adder = $("> .adder", wrapperClass);
                const items = $("> .items", wrapperClass);
                $(items).empty();

                const json = $(jsonInput).val();
                if (json === "" || json === null) {
                    $(jsonInput).val("[]");
                }
                const jsonObject = $.parseJSON(json === "" ? "[]" : json);

                if (jsonObject.length > 0) {
                    $(items).removeClass("hidden");
                } else {
                    $(items).addClass("hidden");
                }

                $.each(jsonObject,
                    (index, item) => {

                        const id = item.@(PropertyExtensions.GetJsonProperty<ItemFeatureJsonValueViewModel>(x => x.Id));
                        const name = item
                            .@(PropertyExtensions.GetJsonProperty<ItemFeatureJsonValueViewModel>(x => x.Name));
                        const from = item
                            .@(PropertyExtensions.GetJsonProperty<ItemFeatureJsonValueViewModel>(x => x.From));
                        const to = item.@(PropertyExtensions.GetJsonProperty<ItemFeatureJsonValueViewModel>(x => x.To));

                        const anchor = document.createElement("a");
                        $(anchor).attr("href", "#");
                        $(anchor).attr("data-id", id);
                        $(anchor).addClass(itemSelector);

                        const nameElement = document.createElement("span");
                        var finalName = `${name}: `;

                        if (from != null && from !== "")
                            finalName = `${finalName} از ${from}`;
                        if (to != null && to !== "")
                            finalName = `${finalName} تا ${to}`;

                        $(nameElement).html(finalName);

                        $(anchor).append(nameElement);
                        $(items).append(anchor);

                    });

                $.each(selectInput.children(":not([value='---'])"),
                    (index, item) => {
                        const id = $(item).val();
                        const i = jsonObject.findIndex(
                            obj => obj.@(PropertyExtensions.GetJsonProperty<ItemFeatureJsonValueViewModel>(x => x.Id)) ===
                            id);
                        if (i >= 0) {
                            $(item).addClass("hidden");
                        } else {
                            $(item).removeClass("hidden");
                        }

                    });

                const availableItems = $('option:not(.hidden):not([value=""])', selectInput);
                console.log("Available items", availableItems);
                if ($(availableItems).length > 0) {
                    $('option:not(.hidden):eq(0)', selectInput).prop('selected', true);
                    $(adder).fadeIn("slow");
                } else {
                    $(adder).fadeOut("slow");
                }

            });

            $(document).on("click",
                ".feature-default",
                function(e) {
                    e.preventDefault();
                    const keyId = $(this).data("feature-id");
                    const keyName = $(this).data("feature-name");
                    const from = $(this).data("feature-from");
                    const to = $(this).data("feature-to");

                    addToFeaturesList(keyId, keyName, from, to);

                });

            function addToFeaturesList(keyId, keyName, from, to) {
                if (keyName === "---" || keyName === undefined || keyName === null || keyName === "")
                    return;

                if (keyId === undefined || keyId === null || keyId === "")
                    return;

                if ((from === undefined || from === null || from === "" || from === "0") &&
                    (to === undefined || to === null || to === "" || to === "0"))
                    return;

                const newItem = {
                    @(PropertyExtensions.GetJsonProperty<ItemFeatureJsonValueViewModel>(x => x.Id)): keyId,
                    @(PropertyExtensions.GetJsonProperty<ItemFeatureJsonValueViewModel>(x => x.Name)): keyName,
                    @(PropertyExtensions.GetJsonProperty<ItemFeatureJsonValueViewModel>(x => x.From)): from,
                    @(PropertyExtensions.GetJsonProperty<ItemFeatureJsonValueViewModel>(x => x.To)): to
                };

                addJson(jsonInput,
                    newItem,
                    obj => obj.@(PropertyExtensions.GetJsonProperty<ItemFeatureJsonValueViewModel>(x => x.Id)) ===
                    newItem.@(PropertyExtensions.GetJsonProperty<ItemFeatureJsonValueViewModel>(x => x.Id)));

                $(fromInput).val("");
                $(toInput).val("");
            }

            $(submitInput).click(function(e) {
                let selected = $(selectInput).find('option:selected:eq(0)')[0];
                if (selected === undefined || selected === null) {
                    selected = $(selectInput).find('option:eq(0)')[0];
                }
                const keyId = $(selected).attr("value");
                const keyName = $(selected).text();
                const from = $(fromInput).val();
                const to = $(toInput).val();

                addToFeaturesList(keyId, keyName, from, to);

            });

            $(document).on("click",
                `.${itemSelector}`,
                function(e) {
                    e.preventDefault();

                    const keyId = $(this).attr("data-id");
                    console.log("KeyId", keyId);

                    const jsonValue = $.parseJSON($(jsonInput).val());
                    console.log("JsonValue", jsonValue);

                    const index =
                        jsonValue.findIndex(prop => prop
                            .@(PropertyExtensions.GetJsonProperty<ItemFeatureJsonValueViewModel>(x => x.Id)) ===
                            keyId);
                    console.log("Index", index);

                    removeJson(jsonInput, index);
                    $(this).remove();
                    console.log("Button Triggered to Remove Item", this);
                });

            $(jsonInput).trigger("change");

        });
    </script>
    <script>
        $(document).ready(function() {

            @*const $grid = $(".grid").isotope({
            itemSelector: '.element-item',
            layoutMode: 'fitRows',
            getSortData: {
                creationDate: function (itemElem) {
                    const plainDate = $(itemElem).attr('data-creationDate');
                    const result = Date.parse(plainDate);
                    return result;
                },
                finalPrice: function (itemElem) {
                    const finalPrice = $(itemElem).attr('data-finalPrice');
                    const result = parseFloat(finalPrice);
                    return result;
                },
                pricePerMeter: function (itemElem) {
                    const pricePerMeter = $(itemElem).attr('data-pricePerMeter');
                    const result = parseFloat(pricePerMeter);
                    return result;
                },
                meters: function (itemElem) {
                    const meters = $(itemElem).attr('data-meters');
                    const result = parseFloat(meters);
                    return result;
                },
                bedRooms: function (itemElem) {
                    const bedRooms = $(itemElem).attr('data-bedRooms');
                    const result = parseFloat(bedRooms);
                    return result;
                },
                buildYear: function (itemElem) {
                    const buildYear = $(itemElem).attr('data-buildYear');
                    const result = parseFloat(buildYear);
                    return result;
                }
            }

        });

        //$grid.isotope({
        //    sortBy: "creationDate",
        //    sortAscending: "descending"
        //});

        $('.sorter').click(function () {
            const sortState = $(this).html();
            const parent = $(this).parent().prev();
            var parentName = $(parent).html();
            parentName = parentName.split(' - ').length > 0 ? parentName.split(' - ')[0] : parentName;

            if (sortState === "@Html.Raw(SharedLocalizer[SharedResource.Cancel])") {
                $grid.isotope({
                    sortBy: ""
                });
                $(parent).html(parentName);

            } else {
                const sortValue = $(this).attr('data-sort-by');
                const ascDesc = $(this).attr('data-sort-ascending');
                const direction = ascDesc === "true" ? true : false;
                $grid.isotope({
                    sortBy: sortValue,
                    sortAscending: direction
                });

                $(parent).html(`${parentName} - ${sortState}`);
            }

            const alreadyActivatedState = $(this).parent().children(".dropdown-item.active")[0];
            $(alreadyActivatedState).toggleClass("active");
            $(this).toggleClass("active");

        });*@

        });
    </script>
}