@page
@model IndexModel
@{
    var districts = await LocationService.DistrictListAsync().ConfigureAwait(false);
    var districtsSelect = districts?.Select(x => new SelectListItem
    {
        Text = x.Name,
        Value = x.Name
    }).AddNone();

    var features = await FeatureService.FeatureListAsync(FeatureTypeEnum.Item, FeatureTypeEnum.Property).ConfigureAwait(false);
    var featuresSelect = features?.Select(x => new SelectListItem
    {
        Text = x.Name,
        Value = x.Id
    }).AddNone();

    var facilities = await FeatureService.FacilityListAsync().ConfigureAwait(false);
    var facilitiesSelect = facilities?.Select(x => new SelectListItem
    {
        Text = x.Name,
        Value = x.Name
    }).AddNone();

    var itemCategorieslist = await FeatureService.CategoryListAsync(CategoryTypeEnum.Item, true).ConfigureAwait(false);
    var itemCategories = (itemCategorieslist?.Select(x => new SelectListItem
    {
        Value = x.Name,
        Text = x.Name,
        Selected = Model.SearchInput?.ItemCategory == x.Name
    }).ToList()).AddNone();

    var propertyCategorieslist = await FeatureService.CategoryListAsync(CategoryTypeEnum.Property, true).ConfigureAwait(false);
    var propertyCategories = (propertyCategorieslist?.Select(x => new SelectListItem
    {
        Value = x.Name,
        Text = x.Name,
        Selected = Model.SearchInput?.PropertyCategory == x.Name
    }).ToList()).AddNone();

}
<div class="col-12">
    <div class="status-message @(Model.Status == StatusEnum.Ready ? "hidden" : "")" asp-validation-summary="All">
        @Model.Status.GetDisplayName()
    </div>
    <div class="widget">
        <widget-header title="@Model.PageTitle">
            <a asp-page="@typeof(AddModel).Page()">@SharedLocalizer["NewItem"]</a>
        </widget-header>
        <section class="container-fluid">
            <form method="post" class="search">
                <div class="row justify-content-center align-items-center">
                    <div class="col-12">
                        <div class="card">
                            <div class="card-header">
                                <a class="card-link" data-toggle="collapse" href="#search">
                                    @SharedLocalizer["Search"]
                                </a>
                                <a class="card-link clearSearch" asp-page="@typeof(IndexModel).Page()">
                                    @SharedLocalizer["ClearSearch"]
                                </a>
                            </div>
                            <div id="search" class="collapse @(Model.SearchInput.IsUnderCondition ? "show" : "")">
                                <div class="card-body">
                                    <div class="row justify-content-center align-items-center">
                                        <input asp-for="SearchInput.PageNo" />
                                        <div class="col-xs-12 col-md">
                                            <div class="input-wrapper">
                                                <label class="control-label" asp-for="SearchInput.Owner"></label>
                                                <input asp-for="SearchInput.Owner" class="form-control" />
                                            </div>
                                        </div>
                                        <div class="col-xs-12 col-md">
                                            <div class="input-wrapper">
                                                <label class="control-label" asp-for="SearchInput.OwnerMobile"></label>
                                                <input asp-for="SearchInput.OwnerMobile" class="form-control" />
                                            </div>
                                        </div>
                                        <div class="col-xs-12 col-md">
                                            <div class="input-wrapper">
                                                <label class="control-label" asp-for="SearchInput.District"></label>
                                                <select asp-items="districtsSelect" asp-for="SearchInput.District" class="custom-select"></select>
                                            </div>
                                        </div>
                                        <div class="col-xs-12 col-md">
                                            <div class="input-wrapper">
                                                <label class="control-label" asp-for="SearchInput.Street"></label>
                                                <input asp-for="SearchInput.Street" class="form-control" />
                                            </div>
                                        </div>
                                    </div>
                                    <hr />
                                    <div class="row justify-content-center align-items-center">
                                        <div class="col-xs-12 col-md">
                                            <div class="input-wrapper">
                                                <label class="control-label" asp-for="SearchInput.ItemCategory"></label>
                                                <select asp-items="itemCategories" asp-for="SearchInput.ItemCategory" class="custom-select"></select>
                                            </div>
                                        </div>
                                        <div class="col-xs-12 col-md">
                                            <div class="input-wrapper">
                                                <label class="control-label" asp-for="SearchInput.PropertyCategory"></label>
                                                <select asp-items="propertyCategories" asp-for="SearchInput.PropertyCategory" class="custom-select"></select>
                                            </div>
                                        </div>
                                    </div>
                                    @if (features?.Any() == true)
                                    {
                                        <hr />
                                        <div class="row justify-content-center align-items-center">
                                            <div class="col-12" id="features-wrapper">
                                                <div class="itemShow adder input-wrapper">
                                                    <input asp-for="SearchInput.FeaturesJson" />
                                                    <label class="control-label">@SharedLocalizer["Features"]</label>
                                                    <select asp-items="featuresSelect" id="features-select" class="custom-select"></select>
                                                    <label class="control-label">@SharedLocalizer["From"]</label>
                                                    <input class="form-control" id="featureFrom" />
                                                    <label class="control-label">@SharedLocalizer["To"]</label>
                                                    <input class="form-control" id="featureTo" />
                                                    <input type="button" id="addNewFeature" class="btn btn-warning btn-sm" value="@SharedLocalizer["Add"]" />
                                                </div>
                                                <div class="items hidden"></div>
                                            </div>
                                        </div>
                                    }
                                    @if (facilities?.Any() == true)
                                    {
                                        <hr />
                                        <div class="row justify-content-center align-items-center">
                                            <div class="col-12" id="facilities-wrapper">
                                                <div class="itemShow adder input-wrapper">
                                                    <input asp-for="SearchInput.FacilitiesJson" />

                                                    <label class="control-label">@SharedLocalizer["Facilities"]</label>
                                                    <select asp-items="facilitiesSelect" id="facility-select" class="custom-select"></select>
                                                    <input type="button" id="addNewFacility" class="btn btn-warning btn-sm" value="@SharedLocalizer["Add"]" />
                                                </div>
                                                <div class="items hidden"></div>
                                            </div>
                                        </div>
                                    }
                                    <vc:admin-search-condition model="@Model.SearchInput" />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </form>

            @if (Model.List.Items?.Any() == true)
            {

                foreach (var item in Model.List.Items)
                {
                    var disabledClass = item.IsDeleted ? "disabled" : "";
                    var disabledTerm = item.IsDeleted ? SharedLocalizer["Undelete"] : SharedLocalizer["Delete"];
                    <div class="row justify-content-center itemShow @disabledClass">
                        <div class="col-12 detail">
                            <div class="info">
                                <ul class="info-breadcrumb">
                                    <li>
                                        <a asp-page="@typeof(IndexModel).Page()" asp-route-itemCategory="@item.Category.Name">@item.Category.Name</a>
                                    </li>
                                    <li>
                                        <a asp-page="@typeof(IndexModel).Page()" asp-route-propertyCategory="@item.Property.Category.Name">
                                            @item.Property.Category.Name
                                        </a>
                                    </li>
                                    <li>
                                        <a asp-page="@typeof(IndexModel).Page()" asp-route-district="@item.Property.District.Name">
                                            @item.Property.District.Name
                                        </a>
                                    </li>
                                </ul>
                                <span>
                                    <a asp-page="@typeof(Property.IndexModel).Page()" asp-route-propertyId="@item.Property.Id" target="_blank">@item.Property.Address</a>
                                </span>
                                @if (item.Property.PropertyFacilities?.Any() == true)
                                {
                                    <span>
                                        @SharedLocalizer["PropertyFacilities"] :
                                        <ul class="info-breadcrumb">
                                            @foreach (var feature in item.Property.PropertyFacilities)
                                            {
                                                <text>
                                                    <li>@feature.Facility?.Name</li>
                                                </text>
                                            }
                                        </ul>
                                    </span>

                                }
                                @if (item.Property.PropertyFeatures?.Any() == true)
                                {
                                    <span>
                                        @SharedLocalizer["PropertyFeatures"] :
                                        <ul class="info-breadcrumb">
                                            @foreach (var feature in item.Property.PropertyFeatures)
                                            {
                                                <text>
                                                    <li>@feature.Feature?.Name &mdash; @feature.Value @feature.Feature?.Name.Postfix()</li>
                                                </text>
                                            }
                                        </ul>
                                    </span>

                                }
                                @if (item.ItemFeatures?.Any() == true)
                                {
                                    <span>
                                        @SharedLocalizer["ItemFeatures"] :
                                        <ul class="info-breadcrumb">
                                            @foreach (var feature in item.ItemFeatures)
                                            {
                                                <text>
                                                    <li>@feature.Feature?.Name &mdash; @feature.Value @feature.Feature?.Name.Postfix()</li>
                                                </text>
                                            }
                                        </ul>
                                    </span>

                                }
                                @if (!string.IsNullOrEmpty(item.Description))
                                {
                                    <span class="text-gray text-justify description">
                                        @item.Description
                                    </span>
                                }
                            </div>
                            @*@if (item.LastState != DealStatusEnum.Requested)
                                {
                                    <a asp-page="@typeof(RequestModel).Page()" asp-route-id="@item.Id" class="btn btn-sm btn-success" data-confirm="@SharedLocalizer["AreYouSureToDoThisRequest"]">@SharedLocalizer["DealRequest"]</a>
                                }*@
                            @if (User.IsInRole(Role.SuperAdmin.ToString()) || User.IsInRole(Role.Admin.ToString()))
                            {
                                <div class="button">

                                    <a asp-page="@typeof(Property.AddModel).Page()" asp-route-id="@item.Property.Id" target="_blank" class="btn btn-sm btn-secondary @disabledClass">@SharedLocalizer["EditProperty"]</a>
                                    <a asp-page="@typeof(AddModel).Page()" asp-route-id="@item.Id" target="_blank" class="btn btn-sm btn-warning @disabledClass">@SharedLocalizer["EditItem"]</a>
                                    <a asp-controller="Remove" asp-action="ItemAsync" asp-route-id="@item.Id" data-confirm="@SharedLocalizer["AreYouSureToDoThisRequest"]" class="btn btn-sm btn-danger">@disabledTerm</a>
                                </div>

                            }
                        </div>
                        <vc:log logs="@item.Logs" cat="Item" id="@item.Id" />
                    </div>
                }

            }
            else
            {
                <div class="row justify-content-center align-items-center">
                    <h5>
                        @SharedLocalizer["NoItemToShow"]
                    </h5>
                </div>
            }
            <vc:pagination model="@Model.List" />
        </section>
    </div>
</div>

@section Scripts
    {
    <script>
        $(document).ready(function() {

            const jsonInput = $("#@nameof(Model.SearchInput)_@nameof(Model.SearchInput.FacilitiesJson)");
            const selectInput = $("#facility-select");
            const wrapperClass = $("#facilities-wrapper");
            const submitInput = $("#addNewFacility");
            const itemSelector = "facility-item";

            $(jsonInput).change(function() {

                const adder = $("> .adder", wrapperClass);
                const items = $("> .items", wrapperClass);
                $(items).empty();

                const json = $(jsonInput).val();
                if (json === "" || json === null) {
                    $(jsonInput).val("[]");
                }
                const jsonObject = $.parseJSON(json === "" ? "[]" : json);

                if (jsonObject.length > 0) {
                    $(items).removeClass("hidden");
                } else {
                    $(items).addClass("hidden");
                }

                $.each(jsonObject,
                    (index, item) => {

                        const name = item
                            .@(PropertyExtensions.GetJsonProperty<ItemFacilityJsonViewModel>(x => x.Name));

                        const anchor = document.createElement("a");
                        $(anchor).attr("href", "#");
                        $(anchor).attr("data-id", name);
                        $(anchor).addClass(itemSelector);
//                        $(anchor).attr("data-confirm", "@Html.Raw(SharedLocalizer["AreYouSureToDoThisRequest"])");

                        const nameElement = document.createElement("span");
                        $(nameElement).html(name);

                        $(anchor).append(nameElement);
                        $(items).append(anchor);

                    });

                $.each(selectInput.children(":not([value='---'])"),
                    (index, item) => {
                        const id = $(item).val();
                        const i = jsonObject.findIndex(
                            obj => obj.@(PropertyExtensions.GetJsonProperty<ItemFacilityJsonViewModel>(x => x.Name)) ===
                            id);
                        if (i >= 0) {
                            $(item).addClass("hidden");
                        } else {
                            $(item).removeClass("hidden");
                        }

                    });

                const availableItems = $('option:not(.hidden):not([value=""])', selectInput);
                console.log("Available items", availableItems);
                if ($(availableItems).length > 0) {
                    $('option:not(.hidden):eq(0)', selectInput).prop('selected', true);
                    $(adder).fadeIn("slow");
                } else {
                    $(adder).fadeOut("slow");
                }

            });

            $(submitInput).click(function(e) {
                let selected = $(selectInput).find('option:selected:not([value="---"]):eq(0)')[0];
                if (selected === undefined || selected === null) {
                    selected = $(selectInput).find('option:eq(0)')[0];
                }
                const keyId = $(selected).attr("value");
                const keyName = $(selected).text();

                if (keyName === "---")
                    return;

                if (keyId === undefined || keyId === null)
                    return;

                const newItem = {
                    @(PropertyExtensions.GetJsonProperty<ItemFacilityJsonViewModel>(x => x.Name)): keyName
                };

                addJson(jsonInput,
                    newItem,
                    obj => obj.@(PropertyExtensions.GetJsonProperty<ItemFacilityJsonViewModel>(x => x.Name)) ===
                    newItem.@(PropertyExtensions.GetJsonProperty<ItemFacilityJsonViewModel>(x => x.Name)));

            });

            $(document).on("click",
                `.${itemSelector}`,
                function(e) {
                    const keyId = $(this).attr("data-id");
                    console.log("KeyId", keyId);

                    const jsonValue = $.parseJSON($(jsonInput).val());
                    console.log("JsonValue", jsonValue);

                    const index =
                        jsonValue.findIndex(prop => prop
                            .@(PropertyExtensions.GetJsonProperty<ItemFacilityJsonViewModel>(x => x.Name)) ===
                            keyId);
                    console.log("Index", index);

                    removeJson(jsonInput, index);
                    $(this).remove();
                    console.log("Button Triggered to Remove Item", this);
                });

            $(jsonInput).trigger("change");

        });
    </script>
    <script>
        $(document).ready(function() {

            const jsonInput = $("#@nameof(Model.SearchInput)_@nameof(Model.SearchInput.FeaturesJson)");
            const selectInput = $("#features-select");
            const wrapperClass = $("#features-wrapper");
            const submitInput = $("#addNewFeature");
            const fromInput = $("#featureFrom");
            const toInput = $("#featureTo");
            const itemSelector = "feature-item";

            $(jsonInput).change(function() {

                const adder = $("> .adder", wrapperClass);
                const items = $("> .items", wrapperClass);
                $(items).empty();

                const json = $(jsonInput).val();
                if (json === "" || json === null) {
                    $(jsonInput).val("[]");
                }
                const jsonObject = $.parseJSON(json === "" ? "[]" : json);

                if (jsonObject.length > 0) {
                    $(items).removeClass("hidden");
                } else {
                    $(items).addClass("hidden");
                }

                $.each(jsonObject,
                    (index, item) => {

                        const id = item.@(PropertyExtensions.GetJsonProperty<ItemFeatureJsonValueViewModel>(x => x.Id));
                        const name = item
                            .@(PropertyExtensions.GetJsonProperty<ItemFeatureJsonValueViewModel>(x => x.Name));
                        const from = item
                            .@(PropertyExtensions.GetJsonProperty<ItemFeatureJsonValueViewModel>(x => x.From));
                        const to = item.@(PropertyExtensions.GetJsonProperty<ItemFeatureJsonValueViewModel>(x => x.To));

                        const anchor = document.createElement("a");
                        $(anchor).attr("href", "#");
                        $(anchor).attr("data-id", id);
                        $(anchor).addClass(itemSelector);

                        const nameElement = document.createElement("span");
                        var finalName = `${name}: `;

                        if (from != null && from !== "")
                            finalName = `${finalName} از ${from}`;
                        if (to != null && to !== "")
                            finalName = `${finalName} تا ${to}`;

                        $(nameElement).html(finalName);

                        $(anchor).append(nameElement);
                        $(items).append(anchor);

                    });

                $.each(selectInput.children(":not([value='---'])"),
                    (index, item) => {
                        const id = $(item).val();
                        const i = jsonObject.findIndex(
                            obj => obj.@(PropertyExtensions.GetJsonProperty<ItemFeatureJsonValueViewModel>(x => x.Id)) ===
                            id);
                        if (i >= 0) {
                            $(item).addClass("hidden");
                        } else {
                            $(item).removeClass("hidden");
                        }

                    });

                const availableItems = $('option:not(.hidden):not([value=""])', selectInput);
                console.log("Available items", availableItems);
                if ($(availableItems).length > 0) {
                    $('option:not(.hidden):eq(0)', selectInput).prop('selected', true);
                    $(adder).fadeIn("slow");
                } else {
                    $(adder).fadeOut("slow");
                }

            });

            $(submitInput).click(function(e) {
                let selected = $(selectInput).find('option:selected:eq(0)')[0];
                if (selected === undefined || selected === null) {
                    selected = $(selectInput).find('option:eq(0)')[0];
                }
                const keyId = $(selected).attr("value");
                const keyName = $(selected).text();
                const from = $(fromInput).val();
                const to = $(toInput).val();

                if (keyName === "---" || keyName === undefined || keyName === null || keyName === "")
                    return;

                if (keyId === undefined || keyId === null || keyId === "")
                    return;

                if ((from === undefined || from === null || from === "" || from === "0") &&
                    (to === undefined || to === null || to === "" || to === "0"))
                    return;

                const newItem = {
                    @(PropertyExtensions.GetJsonProperty<ItemFeatureJsonValueViewModel>(x => x.Id)): keyId,
                    @(PropertyExtensions.GetJsonProperty<ItemFeatureJsonValueViewModel>(x => x.Name)): keyName,
                    @(PropertyExtensions.GetJsonProperty<ItemFeatureJsonValueViewModel>(x => x.From)): from,
                    @(PropertyExtensions.GetJsonProperty<ItemFeatureJsonValueViewModel>(x => x.To)): to
                };

                addJson(jsonInput,
                    newItem,
                    obj => obj.@(PropertyExtensions.GetJsonProperty<ItemFeatureJsonValueViewModel>(x => x.Id)) ===
                    newItem.@(PropertyExtensions.GetJsonProperty<ItemFeatureJsonValueViewModel>(x => x.Id)));

            $(fromInput).val("");
                $(toInput).val("");

            });

            $(document).on("click",
                `.${itemSelector}`,
                function(e) {
                    e.preventDefault();

                    const keyId = $(this).attr("data-id");
                    console.log("KeyId", keyId);

                    const jsonValue = $.parseJSON($(jsonInput).val());
                    console.log("JsonValue", jsonValue);

                    const index =
                        jsonValue.findIndex(prop => prop
                            .@(PropertyExtensions.GetJsonProperty<ItemFeatureJsonValueViewModel>(x => x.Id)) ===
                            keyId);
                    console.log("Index", index);

                    removeJson(jsonInput, index);
                    $(this).remove();
                    console.log("Button Triggered to Remove Item", this);
                });

            $(jsonInput).trigger("change");

        });
    </script>
}