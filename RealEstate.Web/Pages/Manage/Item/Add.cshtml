@page
@model AddModel
@{
    var property = new PropertyInputViewModel();
    var owner = new CustomerInputViewModel();
    var itemFeatures = await FeatureService.FeatureListAsync(FeatureTypeEnum.Item).ConfigureAwait(false);
    var itemFeaturesSelect = itemFeatures?.Select(x => new SelectListItem
    {
        Text = x.Name,
        Value = x.Id,
    }).SelectFirstItem();

    var propertyFacilities = await FeatureService.FacilityListAsync().ConfigureAwait(false);
    var propertyFacilitiesList = propertyFacilities?.Select(x => new SelectListItem
    {
        Value = x.Id,
        Text = x.Name,
    }).SelectFirstItem();

    var propertyFeatures = await FeatureService.FeatureListAsync(FeatureTypeEnum.Property).ConfigureAwait(false);
    var propertyFeaturesList = propertyFeatures?.Select(x => new SelectListItem
    {
        Value = x.Id,
        Text = x.Name,
    }).SelectFirstItem();

    var districts = await LocationService.DistrictListAsync().ConfigureAwait(false);
    var districtsList = districts?.Select(x => new SelectListItem
    {
        Value = x.Id,
        Text = x.Name,
    }).SelectFirstItem();

    var propertyCategories = await FeatureService.CategoryListAsync(CategoryTypeEnum.Property, false).ConfigureAwait(false);
    var propertyCategoriesList = propertyCategories?.Select(x => new SelectListItem
    {
        Value = x.Id,
        Text = x.Name,
    }).SelectFirstItem();

    var itemCategories = await FeatureService.CategoryListAsync(CategoryTypeEnum.Item, false).ConfigureAwait(false);
    var itemCategoriesList = itemCategories?.Select(x => new SelectListItem
    {
        Value = x.Id,
        Text = x.Name,
    }).SelectFirstItem();

}

<div class="col-12">
    <div class="widget">
        <widget-header title="@SharedLocalizer[Model.PageTitle]" />
        <section class="container-fluid">
            <div class="row justify-content-center align-items-center margin-bottomed">
                <div class="col-12" id="accordion">
                    @if (Model.NewItem == null || Model.NewItem.IsNew)
                    {
                        <div class="card">
                            <div class="card-header">
                                <a class="card-link" data-toggle="collapse" href="#property">
                                    @SharedLocalizer[SharedResource.Property]
                                </a>
                            </div>
                            <div id="property" class="collapse @(Model.NewItem == null ? " show" : "" )" data-parent="#accordion">
                                <div class="card-body">
                                    <form id="newProperty_Form" class="row justify-content-center align-items-center">
                                        <input asp-for="@property.OwnershipsJson" id="newProperty_OwnershipsJson" name="newProperty.OwnershipsJson" />
                                        <div class="col-xs-12 col-lg">
                                            <div class="input-wrapper">
                                                <label class="control-label" for="newProperty_CategoryId">@(PropertyExtensions.GetDisplayName<PropertyInputViewModel>(x => x.CategoryId))</label>
                                                <select asp-for="@property.CategoryId" asp-items="propertyCategoriesList" id="newProperty_CategoryId" name="newProperty.CategoryId" class="custom-select"></select>
                                                <span class="text-danger" data-valmsg-for="newProperty.CategoryId" data-valmsg-replace="true"></span>
                                            </div>
                                        </div>
                                        <div class="col-xs-12 col-lg">
                                            <div class="input-wrapper">
                                                <label class="control-label" for="newProperty_DistrictId">@(PropertyExtensions.GetDisplayName<PropertyInputViewModel>(x => x.DistrictId))</label>
                                                <select asp-for="@property.DistrictId" asp-items="districtsList" id="newProperty_DistrictId" name="newProperty.DistrictId" class="custom-select"></select>
                                                <span class="text-danger" data-valmsg-for="newProperty.DistrictId" data-valmsg-replace="true"></span>
                                            </div>
                                        </div>
                                        <div class="col-xs-12 col-lg">
                                            <div class="input-wrapper">
                                                <label class="control-label" for="newProperty_Street">@(PropertyExtensions.GetDisplayName<PropertyInputViewModel>(x => x.Street))</label>
                                                <input asp-for="@property.Street" id="newProperty_Street" name="newProperty.Street" class="form-control" />
                                                <span class="text-danger" data-valmsg-for="newProperty.Street" data-valmsg-replace="true"></span>
                                            </div>
                                        </div>
                                        <div class="col-xs-12 col-lg-2">
                                            <div class="input-wrapper">
                                                <input type="button" id="newProperty_Check" class="btn btn-sm btn-warning btn-block" value="@SharedLocalizer[SharedResource.Check]" />
                                            </div>
                                        </div>
                                    </form>
                                    <div class="row justify-content-center align-items-center margin-bottomed hidden" id="property_similar">
                                        <div class="col-12">
                                            @SharedLocalizer[SharedResource.SimilarItems]
                                            <div class="items"></div>
                                        </div>
                                    </div>
                                    <div id="newProptery_Detail" class="hidden">
                                        <div class="row justify-content-center align-items-center">
                                            <div class="col-xs-12 col-lg">
                                                <div class="input-wrapper">
                                                    <label class="control-label" for="newProperty_Alley">@(PropertyExtensions.GetDisplayName<PropertyInputViewModel>(x => x.Alley))</label>
                                                    <input asp-for="@property.Alley" id="newProperty_Alley" name="newProperty.Alley" class="form-control" />
                                                    <span class="text-danger" data-valmsg-for="newProperty.Alley" data-valmsg-replace="true"></span>
                                                </div>
                                            </div>
                                            <div class="col-xs-12 col-lg">
                                                <div class="input-wrapper">
                                                    <label class="control-label" for="newProperty_Number">@(PropertyExtensions.GetDisplayName<PropertyInputViewModel>(x => x.Number))</label>
                                                    <input asp-for="@property.Number" id="newProperty_Number" name="newProperty.Number" class="form-control" />
                                                    <span class="text-danger" data-valmsg-for="newProperty.Number" data-valmsg-replace="true"></span>
                                                </div>
                                            </div>
                                            <div class="col-xs-12 col-lg">
                                                <div class="input-wrapper">
                                                    <label class="control-label" for="newProperty_BuildingName">@(PropertyExtensions.GetDisplayName<PropertyInputViewModel>(x => x.BuildingName))</label>
                                                    <input asp-for="@property.BuildingName" id="newProperty_BuildingName" name="newProperty.BuildingName" class="form-control" />
                                                    <span class="text-danger" data-valmsg-for="newProperty.BuildingName" data-valmsg-replace="true"></span>
                                                </div>
                                            </div>
                                            <div class="col-xs-12 col-lg">
                                                <div class="input-wrapper">
                                                    <label class="control-label" for="newProperty_Floor">@(PropertyExtensions.GetDisplayName<PropertyInputViewModel>(x => x.Floor))</label>
                                                    <input asp-for="@property.Floor" id="newProperty_Floor" name="newProperty.Floor" class="form-control" />
                                                    <span class="text-danger" data-valmsg-for="newProperty.Floor" data-valmsg-replace="true"></span>
                                                </div>
                                            </div>
                                            <div class="col-xs-12 col-lg">
                                                <div class="input-wrapper">
                                                    <label class="control-label" for="newProperty_Flat">@(PropertyExtensions.GetDisplayName<PropertyInputViewModel>(x => x.Flat))</label>
                                                    <input asp-for="@property.Flat" id="newProperty_Flat" name="newProperty.Flat" class="form-control" />
                                                    <span class="text-danger" data-valmsg-for="newProperty.Flat" data-valmsg-replace="true"></span>
                                                </div>
                                            </div>
                                        </div>
                                        @if (propertyFeatures?.Any() == true)
                                        {
                                            <hr />
                                            <div class="row justify-content-center align-items-center">
                                                <div class="col-12" id="property-features-wrapper">
                                                    <div class="itemShow adder input-wrapper">
                                                        <input asp-for="@property.PropertyFeaturesJson" id="newProperty_PropertyFeaturessJson" />
                                                        <label class="control-label">@SharedLocalizer[SharedResource.Features]</label>
                                                        <select asp-items="propertyFeaturesList" id="propertyFeatures-select" class="custom-select"></select>
                                                        <label class="control-label">@SharedLocalizer[SharedResource.Value]</label>
                                                        <input class="form-control" id="propertyFeatureValue" />
                                                        <input type="button" id="addNewPropertyFeature" class="btn btn-warning btn-sm" value="@SharedLocalizer[SharedResource.Add]" />
                                                    </div>
                                                    <div class="items hidden"></div>
                                                </div>
                                            </div>
                                        }
                                        @if (propertyFacilities?.Any() == true)
                                        {
                                            <hr />
                                            <div class="row justify-content-center align-items-center">
                                                <div class="col-12" id="property-facilities-wrapper">
                                                    <div class="itemShow adder input-wrapper">
                                                        <input asp-for="@property.PropertyFacilitiesJson" id="newProperty_PropertyFacilitiesJson" />
                                                        <label class="control-label">@SharedLocalizer[SharedResource.Facilities]</label>
                                                        <select asp-items="propertyFacilitiesList" id="propertyFacility-select" class="custom-select"></select>
                                                        <input type="button" id="addNewPropertyFacility" class="btn btn-warning btn-sm" value="@SharedLocalizer[SharedResource.Add]" />
                                                    </div>
                                                    <div class="items hidden"></div>
                                                </div>
                                            </div>
                                        }
                                        <hr />
                                        <div class="row justify-content-center align-items-center">
                                            <div class="col-xs-12 col-lg">
                                                <div class="input-wrapper">
                                                    <label class="control-label" for="newProperty_Description">@(PropertyExtensions.GetDisplayName<PropertyInputViewModel>(x => x.Description))</label>
                                                    <textarea asp-for="@property.Description" id="newProperty_Description" name="newProperty.Description" rows="3" class="form-control"></textarea>
                                                    <span class="text-danger" data-valmsg-for="newProperty.Description" data-valmsg-replace="true"></span>
                                                </div>
                                            </div>
                                        </div>
                                        <hr />
                                        <form id="newCustomer_Form" class="row justify-content-center align-items-center">
                                            <div class="col-12">
                                                <h5>
                                                    @SharedLocalizer[SharedResource.Owner]
                                                </h5>
                                            </div>
                                            <div class="col-lg">
                                                <div class="input-wrapper">
                                                    <label class="control-label" for="newCustomer_Name">@(PropertyExtensions.GetDisplayName<CustomerInputViewModel>(x => x.Name))</label>
                                                    <input asp-for="@owner.Name" id="newCustomer_Name" name="newCustomer.Name" class="form-control" />
                                                    <span class="text-danger" data-valmsg-for="newCustomer.Name" data-valmsg-replace="true"></span>
                                                </div>
                                            </div>
                                            <div class="col-lg">
                                                <div class="input-wrapper">
                                                    <label class="control-label" for="newCustomer_Mobile">@(PropertyExtensions.GetDisplayName<CustomerInputViewModel>(x => x.Mobile))</label>
                                                    <input asp-for="@owner.Mobile" id="newCustomer_Mobile" name="newCustomer.Mobile" class="form-control" />
                                                    <span class="text-danger" data-valmsg-for="newCustomer.Mobile" data-valmsg-replace="true"></span>
                                                </div>
                                            </div>
                                            <div class="col-lg-2">
                                                <div class="input-wrapper">
                                                    <input type="button" id="newCustomer_Check" class="btn btn-sm btn-warning btn-block" value="@SharedLocalizer[SharedResource.Check]" />
                                                </div>
                                            </div>
                                        </form>
                                        <div class="row justify-content-center align-items-center margin-bottomed hidden" id="customer_similar">
                                            <div class="col-12">
                                                @SharedLocalizer[SharedResource.SimilarItems]
                                                <div class="items"></div>
                                            </div>
                                        </div>
                                        <div id="newCustomer_Detail" class="hidden">
                                            <hr />
                                            <div class="row justify-content-center align-items-center">
                                                <div class="col-xs-12 col-lg">
                                                    <div class="input-wrapper">
                                                        <label class="control-label" for="newCustomer_Phone">@(PropertyExtensions.GetDisplayName<CustomerInputViewModel>(x => x.Phone))</label>
                                                        <input asp-for="@owner.Phone" id="newCustomer_Phone" name="newCustomer.Phone" class="form-control" />
                                                        <span class="text-danger" data-valmsg-for="newCustomer.Phone" data-valmsg-replace="true"></span>
                                                    </div>
                                                </div>
                                                <div class="col-xs-12 col-lg">
                                                    <div class="input-wrapper">
                                                        <label class="control-label" for="newCustomer_Address">@(PropertyExtensions.GetDisplayName<CustomerInputViewModel>(x => x.Address))</label>
                                                        <input asp-for="@owner.Address" id="newCustomer_Address" name="newCustomer.Address" class="form-control" />
                                                        <span class="text-danger" data-valmsg-for="newCustomer.Address" data-valmsg-replace="true"></span>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="row justify-content-center align-items-center">
                                                <div class="col">
                                                    <input type="button" id="newCustomer_Submit" class="btn btn-sm btn-success btn-block" value="@SharedLocalizer[SharedResource.SubmitOwner]" />
                                                </div>
                                            </div>
                                        </div>
                                        <hr />
                                        <div class="row justify-content-center align-items-center hidden" id="submitProperty">
                                            <div class="col">
                                                <input type="button" id="newProperty_Submit" class="btn btn-sm btn-success btn-block" value="@SharedLocalizer[" SubmitProperty"]" />
                                            </div>
                                        </div>
                                    </div>

                                    <div id="propertyMessage" class="status-message hidden"></div>
                                </div>
                            </div>
                        </div>
                    }
                    <div class="card @(Model.NewItem == null || Model.NewItem.IsNew ? "hidden" : "")" id="itemCard">
                        <div class="card-header">
                            <a class="card-link" data-toggle="collapse" href="#item">
                                @SharedLocalizer[SharedResource.Item]
                            </a>
                        </div>
                        <div id="item" class="collapse @(Model.NewItem != null && !Model.NewItem.IsNew ? " show" : "" )" data-parent="#accordion">
                            <div class="status-message @(Model.Status == StatusEnum.Ready ? " hidden" : "" )" asp-validation-summary="All">
                                @Model.Status.GetDisplayName()
                            </div>
                            <div class="card-body">
                                <form method="post" class="row justify-content-center align-items-center">
                                    <input asp-for="NewItem.PropertyId" />
                                    <input asp-for="NewItem.Id" />
                                    <div class="col-12">
                                        <div class="row justify-content-center align-items-center">
                                            <div class="col-12">
                                                <div class="input-wrapper">
                                                    <label asp-for="NewItem.CategoryId" class="control-label"></label>
                                                    <select asp-items="itemCategoriesList" asp-for="NewItem.CategoryId" class="custom-select"></select>
                                                    <span asp-validation-for="NewItem.CategoryId" class="text-danger"></span>
                                                </div>
                                            </div>
                                        </div>
                                        @if (itemFeatures?.Any() == true)
                                        {
                                            <hr />
                                            <div class="row justify-content-center align-items-center">
                                                <div class="col-12" id="features-wrapper">
                                                    <div class="itemShow adder input-wrapper">
                                                        <input asp-for="NewItem.ItemFeaturesJson" />
                                                        <label class="control-label">@SharedLocalizer[SharedResource.Features]</label>
                                                        <select asp-items="itemFeaturesSelect" id="features-select" class="custom-select"></select>
                                                        <label class="control-label">@SharedLocalizer[SharedResource.Value]</label>
                                                        <input class="form-control" id="featureValue" />
                                                        <input type="button" id="addNewFeature" class="btn btn-warning btn-sm" value="@SharedLocalizer[SharedResource.Add]" />
                                                    </div>
                                                    <div class="items hidden"></div>
                                                </div>
                                            </div>
                                        }
                                        <hr />
                                        <div class="row justify-content-center align-items-center">
                                            <div class="col-12 margin-bottomed">
                                                <label asp-for="NewItem.Description" class="control-label"></label>
                                                <textarea asp-for="NewItem.Description" class="form-control" rows="3"></textarea>
                                                <span asp-validation-for="NewItem.Description" class="text-danger"></span>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col">
                                        <input type="submit" value="@SharedLocalizer[SharedResource.SubmitItem]" class="btn btn-success btn-block" />
                                    </div>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </section>
    </div>
</div>
@section Scripts
            {

    <script>
        var customerChanged = true;

        $(document).ready(function() {
            const propertyCollapse = $(".collapse[id='property']");
            const ownerCollapse = $(".collapse[id='owner']");

            const status = $("#customerMessage");

            const ownersInput = $("#newProperty_OwnershipsJson");
            const mobileInput = $("#newCustomer_Mobile");
            const nameInput = $("#newCustomer_Name");
            const phoneInput = $("#newCustomer_Phone");
            const addressInput = $("#newCustomer_Address");

            const selector = "customer-item";
            const checkButton = $("#newCustomer_Check");
            const submitButton = $("#newCustomer_Submit");

            const form = $("#newProperty_Form");
            const detail = $("#newCustomer_Detail");
            const similars = $("#customer_similar");
            const items = $(".items", similars);

            const submitPropertyRow = $("#submitProperty");

            function setOwnerStatus(text) {
                $(status).html(text);
                $(status).removeClass("hidden");
                setTimeout(function() {
                        $(status).addClass("hidden");

                    },
                    2000);
            }

            //setInterval(function() {
            //        if (customerChanged) {
            //            $(phoneInput).val("");
            //            $(addressInput).val("");
            //            $(detail).addClass("hidden");
            //            $(similars).addClass("hidden");
            //            console.log("customerChanged:", customerChanged);
            //        }

            //    },
            //    100);

            $(nameInput).on("change paste keyup input propertychange",
                function() {
                    if (!customerChanged) {
                        customerChanged = true;
                    }
                });
            $(mobileInput).on("change paste keyup input propertychange",
                function() {
                    if (!customerChanged) {
                        customerChanged = true;
                    }
                });

            $(submitButton).click(function(e) {
                if (!customerChanged) {

                    const children = $("[data-val='true']", form);
                    $.each(children,
                        (key, value) => {
                            $(value).valid();
                        });

                    if ($(form)[0].checkValidity()) {

                        const address = $(addressInput).val();
                        const phone = $(phoneInput).val();
                        const name = $(nameInput).val();
                        const mobile = $(mobileInput).val();

                        const model = {
                            @(PropertyExtensions.GetProperty<CustomerJsonViewModel>(x => x.Address).Name): address,
                            @(PropertyExtensions.GetProperty<CustomerJsonViewModel>(x => x.Name).Name): name,
                            @(PropertyExtensions.GetProperty<CustomerJsonViewModel>(x => x.Phone).Name): phone,
                            @(PropertyExtensions.GetProperty<CustomerJsonViewModel>(x => x.Mobile).Name): mobile
                        };

                        console.log(model);
                        $.post("@Url.Action("CustomerAsync", "Add")",
                            model,
                            function(response) {
                                console.log(response);
                                if (response != undefined) {

                                    const responseMessage = response
                                        .@(PropertyExtensions.GetJsonProperty<JsonStatusViewModel>(x => x.Message));
                                    const responseStatusCode =
                                        response
                                            .@(PropertyExtensions.GetJsonProperty<JsonStatusViewModel>(x => x.StatusCode));
                                    const responseId =
                                        response
                                            .@(PropertyExtensions.GetJsonProperty<JsonStatusViewModel>(x => x.Id));

                                    setOwnerStatus(responseMessage);
                                    if (responseStatusCode === @((int)StatusEnum.Success) ||
                                        responseStatusCode === @((int)StatusEnum.PartialSuccess)) {

                                        setOwner(responseId);

                                    }
                                }
                            });

                    }
                }

            });

            $(document).on("click",
                `.${selector}`,
                function(e) {
                    const keyId = $(this).attr("data-id");
                    console.log("KeyId", keyId);

                    setOwner(keyId);
                });

            function setOwner(customerId) {
                if (customerId == undefined || customerId === null || customerId === "")
                    return;

                $(ownersInput).val("[]");
                $.get("@Url.Action("CustomerAsync", "Detail")",
                    { id: customerId },
                    function(response) {
                        if (response != undefined &&
                            response != null &&
                            response.id !== null &&
                            response.id.length > 0) {

                            const id = response.@(PropertyExtensions.GetJsonProperty<CustomerJsonViewModel>(x => x.Id));
                            const name = response
                                .@(PropertyExtensions.GetJsonProperty<CustomerJsonViewModel>(x => x.Name));
                            const mobile = response
                                .@(PropertyExtensions.GetJsonProperty<CustomerJsonViewModel>(x => x.Mobile));
                            const address = response
                                .@(PropertyExtensions.GetJsonProperty<CustomerJsonViewModel>(x => x.Address));
                            const phone = response
                                .@(PropertyExtensions.GetJsonProperty<CustomerJsonViewModel>(x => x.Id));

                            const model = [
                                {
                                    @(PropertyExtensions.GetJsonProperty<OwnershipJsonViewModel>(x => x.Name)): name,
                                    @(PropertyExtensions.GetJsonProperty<OwnershipJsonViewModel>(x => x.CustomerId)):
                                        id,
                                    @(PropertyExtensions.GetJsonProperty<OwnershipJsonViewModel>(x => x.Mobile)):
                                        mobile,
                                    @(PropertyExtensions.GetJsonProperty<OwnershipJsonViewModel>(x => x.Dong)): 6,
                                }
                            ];

                            const json = JSON.stringify(model);
                            $(ownersInput).val(json);

                        $(detail).fadeOut();
                            $(similars).fadeOut();

                            setTimeout(function() {
                                    $(phoneInput).val("");
                                    $(addressInput).val("");
                                    $(detail).addClass("hidden");
                                    $(similars).addClass("hidden");
                                    $(submitPropertyRow).removeClass("hidden");
                                },
                                500);

                        }
                    });
            }

            $(checkButton).click(function(e) {

                customerChanged = false;
                if ($(form)[0].checkValidity()) {

                    $(nameInput).valid();
                    $(mobileInput).valid();

                    const name = $(nameInput).val();
                    const mobile = $(mobileInput).val();

                    const model = {
                        mobile: mobile,
                        name: name
                    };
                    $.get("@Url.Action("CustomerAsync", "Search")",
                        model,
                        function(response) {
                            console.log(response);
                            if (response !== null && response.length > 0) {
                                $(items).empty();

                                $.each(response,
                                    (key, customer) => {

                                        const customerId =
                                            customer
                                                .@(PropertyExtensions.GetJsonProperty<CustomerJsonViewModel>(x => x.Id));
                                        const customerMobile =
                                            customer
                                                .@(PropertyExtensions.GetJsonProperty<CustomerJsonViewModel>(x => x.Mobile));
                                        const customerName =
                                            customer
                                                .@(PropertyExtensions.GetJsonProperty<CustomerJsonViewModel>(x => x.Name));
                                        const customerPhone =
                                            customer
                                                .@(PropertyExtensions.GetJsonProperty<CustomerJsonViewModel>(x => x.Phone));
                                        const customerAddress =
                                            customer
                                                .@(PropertyExtensions.GetJsonProperty<CustomerJsonViewModel>(x => x.Address));

                                        const anchor = document.createElement("a");
                                        $(anchor).attr("href", "#");
                                        $(anchor).attr("data-id", customerId);
                                        $(anchor).addClass(selector);

                                        const finalString = `${customerName} ${customerMobile}`;
                                        const nameElement = document.createElement("span");
                                        $(nameElement).html(finalString);

                                        $(anchor).append(nameElement);
                                        $(items).append(anchor);
                                    });

                                $(detail).removeClass("hidden");
                                $(similars).removeClass("hidden");
                            } else {
                                $(detail).removeClass("hidden");
                                $(similars).addClass("hidden");
                            }
                            customerChanged = false;

                        });
                }

            });
        });
    </script>
    <script>

        var propertyChanged = true;

        $(document).ready(function() {

            const propertyCollapse = $(".collapse[id='property']");
            const ownerCollapse = $(".collapse[id='owner']");
            const itemCollapse = $(".collapse[id='item']");

            const status = $("#propertyMessage");

            const propertyIdInput = $("#@nameof(Model.NewItem)_@nameof(Model.NewItem.PropertyId)");
            const ownersInput = $("#newProperty_OwnershipsJson");
            const categoryIdSelect = $("#newProperty_CategoryId");
            const districtIdSelect = $("#newProperty_DistrictId");
            const streetInput = $("#newProperty_Street");

            const alleyInput = $("#newProperty_Alley");
            const numberInput = $("#newProperty_Number");
            const buildingNameInput = $("#newProperty_BuildingName");
            const floorInput = $("#newProperty_Floor");
            const flatInput = $("#newProperty_Flat");
            const featuresJsonInput = $("#newProperty_PropertyFeaturessJson");
            const facilitiesJsonInput = $("#newProperty_PropertyFacilitiesJson");
            const descriptionInput = $("#newProperty_Description");

            const selector = "property-item";
            const checkButton = $("#newProperty_Check");
            const submitButton = $("#newProperty_Submit");

            const form = $("#newProperty_Form");
            const detail = $("#newProptery_Detail");
            const similars = $("#property_similar");
            const items = $(".items", similars);

            const itemCard = $("#itemCard");

            function setPropertyStatus(text) {
                $(status).html(text);
                $(status).removeClass("hidden");
                setTimeout(function() {
                        $(status).addClass("hidden");

                    },
                    2000);
            }

            //setInterval(function() {
            //    if (propertyChanged) {
            //            $(alleyInput).val("");
            //            $(numberInput).val("");
            //            $(buildingNameInput).val("");
            //            $(floorInput).val("");
            //            $(flatInput).val("");
            //            $(featuresJsonInput).val("[]");
            //            $(facilitiesJsonInput).val("[]");
            //            $(descriptionInput).val("");

            //            $(detail).addClass("hidden");
            //            $(similars).addClass("hidden");
            //            console.log("propertyChanged:", propertyChanged);
            //        }

            //    },
            //    100);

            $(streetInput).on("change paste keyup input propertychange",
                function() {
                    if (!propertyChanged) {
                        propertyChanged = true;
                    }
                });
            $(districtIdSelect).on("change propertychange",
                function() {
                    if (!propertyChanged) {
                        propertyChanged = true;
                    }
                });
            $(categoryIdSelect).on("change propertychange",
                function() {
                    if (!propertyChanged) {
                        propertyChanged = true;
                    }
                });

            $(submitButton).click(function(e) {
                if (!propertyChanged) {

                    const children = $("[data-val='true']", form);
                    $.each(children,
                        (key, value) => {
                            $(value).valid();
                        });

                    if ($(form)[0].checkValidity()) {

                        const ownerJson = $(ownersInput).val();
                        if (ownerJson === "[]" || ownerJson === null || ownerJson === "") {
                            setPropertyStatus("مالک انتخاب نشده است");
                            return;
                        }

                        const street = $(streetInput).val();
                        const districtId = $(`option[value='${$(districtIdSelect).val()}']`, districtIdSelect).val();
                        const categoryId = $(`option[value='${$(categoryIdSelect).val()}']`, categoryIdSelect).val();
                        const alley = $(alleyInput).val();
                        const number = $(numberInput).val();
                        const buildingNumber = $(buildingNameInput).val();
                        const floor = $(floorInput).val();
                        const flat = $(flatInput).val();
                        const featuresJson = $(featuresJsonInput).val();
                        const facilitiesJson = $(facilitiesJsonInput).val();
                        const description = $(descriptionInput).val();

                        const model = {
                            @(PropertyExtensions.GetProperty<PropertyInputViewModel>(x => x.Street).Name): street,
                            @(PropertyExtensions.GetProperty<PropertyInputViewModel>(x => x.DistrictId).Name): districtId,
                            @(PropertyExtensions.GetProperty<PropertyInputViewModel>(x => x.CategoryId).Name): categoryId,
                            @(PropertyExtensions.GetProperty<PropertyInputViewModel>(x => x.Alley).Name): alley,
                            @(PropertyExtensions.GetProperty<PropertyInputViewModel>(x => x.Number).Name): number,
                            @(PropertyExtensions.GetProperty<PropertyInputViewModel>(x => x.BuildingName).Name): buildingNumber,
                            @(PropertyExtensions.GetProperty<PropertyInputViewModel>(x => x.Floor).Name): floor,
                            @(PropertyExtensions.GetProperty<PropertyInputViewModel>(x => x.Flat).Name): flat,
                            @(PropertyExtensions.GetProperty<PropertyInputViewModel>(x => x.PropertyFeaturesJson).Name): featuresJson,
                            @(PropertyExtensions.GetProperty<PropertyInputViewModel>(x => x.PropertyFacilitiesJson).Name): facilitiesJson,
                            @(PropertyExtensions.GetProperty<PropertyInputViewModel>(x => x.Description).Name): description,
                            @(PropertyExtensions.GetProperty<PropertyInputViewModel>(x => x.OwnershipsJson).Name): ownerJson,

                        };

                        $.post("@Url.Action("PropertyAsync", "Add")",
                            model,
                            function(response) {
                                console.log(response);
                                if (response != undefined) {

                                    const responseMessage = response
                                        .@(PropertyExtensions.GetJsonProperty<JsonStatusViewModel>(x => x.Message));
                                    const responseStatusCode =
                                        response
                                            .@(PropertyExtensions.GetJsonProperty<JsonStatusViewModel>(x => x.StatusCode));
                                    const responseId =
                                        response
                                            .@(PropertyExtensions.GetJsonProperty<JsonStatusViewModel>(x => x.Id));

                                    setPropertyStatus(responseMessage);
                                    if (responseStatusCode === @((int)StatusEnum.Success) ||
                                        responseStatusCode === @((int)StatusEnum.PartialSuccess)) {

                                        setProperty(responseId);
                                    }
                                }
                            });

                    }
                }

            });

            $(document).on("click",
                `.${selector}`,
                function(e) {
                    const keyId = $(this).attr("data-id");
                    console.log("KeyId", keyId);

                    setProperty(keyId);
                });

            function setProperty(propertyId) {
                if (propertyId == undefined || propertyId === null || propertyId === "")
                    return;

                $.get("@Url.Action("PropertyAsync", "Detail")",
                    { id: propertyId },
                    function(response) {
                        if (response != undefined &&
                            response != null &&
                            response.id !== null &&
                            response.id.length > 0) {

                            const id = response.@(PropertyExtensions.GetJsonProperty<PropertyJsonViewModel>(x => x.Id));
                            $(propertyIdInput).val(id);
                            $(itemCard).removeClass("hidden");
                            setTimeout(function() {
                                $(itemCollapse).collapse("show");
                                    $(ownersInput).val("");
                                    $(categoryIdSelect).val("");
                                    $(districtIdSelect).val("");
                                    $(streetInput).val("");
                                    $(numberInput).val("");
                                    $(alleyInput).val("");
                                    $(buildingNameInput).val("");
                                    $(descriptionInput).val("");
                                    $(floorInput).val("0");
                                    $(flatInput).val("0");
                                    $(featuresJsonInput).val("[]");
                                    $(facilitiesJsonInput).val("[]");
                                    $(detail).addClass("hidden");
                                    $(similars).addClass("hidden");
                                },
                                2000);

                        }
                    });
            }

            $(checkButton).click(function(e) {

                propertyChanged = false;
                if ($(form)[0].checkValidity()) {

                    $(categoryIdSelect).valid();
                    $(districtIdSelect).valid();
                    $(streetInput).valid();

                    const selectedDistrictId = $(districtIdSelect).val();
                    const selectedCategoryId = $(categoryIdSelect).val();

                    const street = $(streetInput).val();
                    const district = $(`option[value='${selectedDistrictId}']`, districtIdSelect).html();
                    const category = $(`option[value='${selectedCategoryId}']`, categoryIdSelect).html();

                    const model = {
                        district: district,
                        category: category,
                        street: street
                    };
                    $.get("@Url.Action("ItemAsync", "Search")",
                        model,
                        function(response) {
                            console.log(response);
                            if (response !== null && response.length > 0) {
                                $(items).empty();

                                $.each(response,
                                    (key, property) => {

                                        const propertyId =
                                            property
                                                .@(PropertyExtensions.GetJsonProperty<PropertyJsonViewModel>(x => x.Id));
                                        const propertyCategory =
                                            property
                                                .@(PropertyExtensions.GetJsonProperty<PropertyJsonViewModel>(x => x.Category));
                                        const propertyDistrict =
                                            property
                                                .@(PropertyExtensions.GetJsonProperty<PropertyJsonViewModel>(x => x.District));
                                        const propertyAddress =
                                            property
                                                .@(PropertyExtensions.GetJsonProperty<PropertyJsonViewModel>(x => x.Address));

                                        const anchor = document.createElement("a");
                                        $(anchor).attr("href", "#");
                                        $(anchor).attr("data-id", propertyId);
                                        $(anchor).addClass(selector);

                                        const finalString = `@Html.Raw(SharedLocalizer["District"]): ${propertyDistrict
                                            } ، @Html.Raw(SharedLocalizer["Category"]): ${propertyCategory
                                            } ، @Html.Raw(SharedLocalizer["Address"]): ${propertyAddress}`;
                                        const nameElement = document.createElement("span");
                                        $(nameElement).html(finalString);

                                        $(anchor).append(nameElement);
                                        $(items).append(anchor);
                                    });

                                $(detail).removeClass("hidden");
                                $(similars).removeClass("hidden");
                            } else {
                                $(detail).removeClass("hidden");
                                $(similars).addClass("hidden");
                            }
                            propertyChanged = false;

                        });
                }

            });
        });
    </script>
    <script>
        $(document).ready(function() {

            const jsonInput = $("#newProperty_PropertyFeaturessJson");
            const selectInput = $("#propertyFeatures-select");
            const wrapperClass = $("#property-features-wrapper");
            const submitInput = $("#addNewPropertyFeature");
            const valueInput = $("#propertyFeatureValue");
            const itemSelector = "property-feature-item";

            $(jsonInput).change(function() {

                const adder = $("> .adder", wrapperClass);
                const items = $("> .items", wrapperClass);
                $(items).empty();

                const json = $(jsonInput).val();
                if (json === "" || json === null) {
                    $(jsonInput).val("[]");
                }
                const jsonObject = $.parseJSON(json === "" ? "[]" : json);

                if (jsonObject.length > 0) {
                    $(items).removeClass("hidden");
                } else {
                    $(items).addClass("hidden");
                }

                $.each(jsonObject,
                    (index, item) => {

                        const id = item.@(PropertyExtensions.GetJsonProperty<FeatureJsonValueViewModel>(x => x.Id));
                        const name = item
                            .@(PropertyExtensions.GetJsonProperty<FeatureJsonValueViewModel>(x => x.Name));
                        const value = item
                            .@(PropertyExtensions.GetJsonProperty<FeatureJsonValueViewModel>(x => x.Value));

                        const anchor = document.createElement("a");
                        $(anchor).attr("href", "#");
                        $(anchor).attr("data-id", id);
                        $(anchor).addClass(itemSelector);

                        const nameElement = document.createElement("span");
                        var finalName = `${name}: `;

                        if (value != null && value !== "")
                            finalName = `${finalName}${value}`;

                        $(nameElement).html(finalName);

                        $(anchor).append(nameElement);
                        $(items).append(anchor);

                    });

                $.each(selectInput.children(":not([value='---'])"),
                    (index, item) => {
                        const id = $(item).val();
                        const i = jsonObject.findIndex(
                            obj => obj.@(PropertyExtensions.GetJsonProperty<FeatureJsonValueViewModel>(x => x.Id)) ===
                            id);
                        if (i >= 0) {
                            $(item).addClass("hidden");
                        } else {
                            $(item).removeClass("hidden");
                        }

                    });

                const availableItems = $('option:not(.hidden):not([value=""])', selectInput);
                console.log("Available items", availableItems);
                if ($(availableItems).length > 0) {
                    $('option:not(.hidden):eq(0)', selectInput).prop('selected', true);
                    $(adder).fadeIn("slow");
                } else {
                    $(adder).fadeOut("slow");
                }

            });

            $(submitInput).click(function(e) {
                let selected = $(selectInput).find('option:selected:eq(0)')[0];
                if (selected === undefined || selected === null) {
                    selected = $(selectInput).find('option:eq(0)')[0];
                }
                const keyId = $(selected).attr("value");
                const keyName = $(selected).text();
                const value = $(valueInput).val();

                if (keyName === "---" || keyName === undefined || keyName === null || keyName === "")
                    return;

                if (keyId === undefined || keyId === null || keyId === "")
                    return;

                if ((value === undefined || value === null || value === "" || value === "0"))
                    return;

                const newItem = {
                    @(PropertyExtensions.GetJsonProperty<FeatureJsonValueViewModel>(x => x.Id)): keyId,
                    @(PropertyExtensions.GetJsonProperty<FeatureJsonValueViewModel>(x => x.Name)): keyName,
                    @(PropertyExtensions.GetJsonProperty<FeatureJsonValueViewModel>(x => x.Value)): value
                };

                addJson(jsonInput,
                    newItem,
                    obj => obj.@(PropertyExtensions.GetJsonProperty<FeatureJsonValueViewModel>(x => x.Id)) ===
                    newItem.@(PropertyExtensions.GetJsonProperty<FeatureJsonValueViewModel>(x => x.Id)));

                $(valueInput).val("");

            });

            $(document).on("click",
                `.${itemSelector}`,
                function(e) {
                    e.preventDefault();

                    const keyId = $(this).attr("data-id");
                    console.log("KeyId", keyId);

                    const jsonValue = $.parseJSON($(jsonInput).val());
                    console.log("JsonValue", jsonValue);

                    const index =
                        jsonValue.findIndex(prop => prop
                            .@(PropertyExtensions.GetJsonProperty<FeatureJsonValueViewModel>(x => x.Id)) ===
                            keyId);
                    console.log("Index", index);

                    removeJson(jsonInput, index);
                    $(this).remove();
                    console.log("Button Triggered to Remove Item", this);
                });

            $(jsonInput).trigger("change");

        });
    </script>
    <script>
        $(document).ready(function() {

            const jsonInput = $("#newProperty_PropertyFacilitiesJson");
            const selectInput = $("#propertyFacility-select");
            const wrapperClass = $("#property-facilities-wrapper");
            const submitInput = $("#addNewPropertyFacility");
            const itemSelector = "property-facility-item";

            $(jsonInput).change(function() {

                const adder = $("> .adder", wrapperClass);
                const items = $("> .items", wrapperClass);
                $(items).empty();

                const json = $(jsonInput).val();
                if (json === "" || json === null) {
                    $(jsonInput).val("[]");
                }
                const jsonObject = $.parseJSON(json === "" ? "[]" : json);

                if (jsonObject.length > 0) {
                    $(items).removeClass("hidden");
                } else {
                    $(items).addClass("hidden");
                }

                $.each(jsonObject,
                    (index, item) => {
                        const id = item
                            .@(PropertyExtensions.GetJsonProperty<FacilityJsonViewModel>(x => x.Id));
                        const name = item
                            .@(PropertyExtensions.GetJsonProperty<FacilityJsonViewModel>(x => x.Name));

                        const anchor = document.createElement("a");
                        $(anchor).attr("href", "#");
                        $(anchor).attr("data-id", id);
                        $(anchor).addClass(itemSelector);
//                        $(anchor).attr("data-confirm", "@Html.Raw(SharedLocalizer["AreYouSureToDoThisRequest"])");

                        const nameElement = document.createElement("span");
                        $(nameElement).html(name);

                        $(anchor).append(nameElement);
                        $(items).append(anchor);

                    });

                $.each(selectInput.children(":not([value='---'])"),
                    (index, item) => {
                        const id = $(item).val();
                        const i = jsonObject.findIndex(
                            obj => obj.@(PropertyExtensions.GetJsonProperty<FacilityJsonViewModel>(x => x.Id)) ===
                            id);
                        if (i >= 0) {
                            $(item).addClass("hidden");
                        } else {
                            $(item).removeClass("hidden");
                        }

                    });

                const availableItems = $('option:not(.hidden):not([value=""])', selectInput);
                console.log("Available items", availableItems);
                if ($(availableItems).length > 0) {
                    $('option:not(.hidden):eq(0)', selectInput).prop('selected', true);
                    $(adder).fadeIn("slow");
                } else {
                    $(adder).fadeOut("slow");
                }

            });

            $(submitInput).click(function(e) {
                let selected = $(selectInput).find('option:selected:not([value="---"]):eq(0)')[0];
                if (selected === undefined || selected === null) {
                    selected = $(selectInput).find('option:eq(0)')[0];
                }
                const keyId = $(selected).attr("value");
                const keyName = $(selected).text();

                if (keyName === "---")
                    return;

                if (keyId === undefined || keyId === null)
                    return;

                const newItem = {
                    @(PropertyExtensions.GetJsonProperty<FacilityJsonViewModel>(x => x.Id)): keyId,
                    @(PropertyExtensions.GetJsonProperty<FacilityJsonViewModel>(x => x.Name)): keyName
                };

                addJson(jsonInput,
                    newItem,
                    obj => obj.@(PropertyExtensions.GetJsonProperty<FacilityJsonViewModel>(x => x.Name)) ===
                    newItem.@(PropertyExtensions.GetJsonProperty<FacilityJsonViewModel>(x => x.Name)));

            });

            $(document).on("click",
                `.${itemSelector}`,
                function(e) {
                    const keyId = $(this).attr("data-id");
                    console.log("KeyId", keyId);

                    const jsonValue = $.parseJSON($(jsonInput).val());
                    console.log("JsonValue", jsonValue);

                    const index =
                        jsonValue.findIndex(prop => prop
                            .@(PropertyExtensions.GetJsonProperty<FacilityJsonViewModel>(x => x.Name)) ===
                            keyId);
                    console.log("Index", index);

                    removeJson(jsonInput, index);
                    $(this).remove();
                    console.log("Button Triggered to Remove Item", this);
                });

            $(jsonInput).trigger("change");

        });
    </script>
    <script>
        $(document).ready(function() {

            const jsonInput = $("#@nameof(Model.NewItem)_@nameof(Model.NewItem.ItemFeaturesJson)");
            const selectInput = $("#features-select");
            const wrapperClass = $("#features-wrapper");
            const submitInput = $("#addNewFeature");
            const valueInput = $("#featureValue");
            const itemSelector = "feature-item";

            $(jsonInput).change(function() {

                const adder = $("> .adder", wrapperClass);
                const items = $("> .items", wrapperClass);
                $(items).empty();

                const json = $(jsonInput).val();
                if (json === "" || json === null) {
                    $(jsonInput).val("[]");
                }
                const jsonObject = $.parseJSON(json === "" ? "[]" : json);

                if (jsonObject.length > 0) {
                    $(items).removeClass("hidden");
                } else {
                    $(items).addClass("hidden");
                }

                $.each(jsonObject,
                    (index, item) => {

                        const id = item.@(PropertyExtensions.GetJsonProperty<FeatureJsonValueViewModel>(x => x.Id));
                        const name = item
                            .@(PropertyExtensions.GetJsonProperty<FeatureJsonValueViewModel>(x => x.Name));
                        const value = item
                            .@(PropertyExtensions.GetJsonProperty<FeatureJsonValueViewModel>(x => x.Value));

                        const anchor = document.createElement("a");
                        $(anchor).attr("href", "#");
                        $(anchor).attr("data-id", id);
                        $(anchor).addClass(itemSelector);

                        const nameElement = document.createElement("span");
                        var finalName = `${name}: `;

                        if (value != null && value !== "")
                            finalName = `${finalName}${value}`;

                        $(nameElement).html(finalName);

                        $(anchor).append(nameElement);
                        $(items).append(anchor);

                    });

                $.each(selectInput.children(":not([value='---'])"),
                    (index, item) => {
                        const id = $(item).val();
                        const i = jsonObject.findIndex(
                            obj => obj.@(PropertyExtensions.GetJsonProperty<FeatureJsonValueViewModel>(x => x.Id)) ===
                            id);
                        if (i >= 0) {
                            $(item).addClass("hidden");
                        } else {
                            $(item).removeClass("hidden");
                        }

                    });

                const availableItems = $('option:not(.hidden):not([value=""])', selectInput);
                console.log("Available items", availableItems);
                if ($(availableItems).length > 0) {
                    $('option:not(.hidden):eq(0)', selectInput).prop('selected', true);
                    $(adder).fadeIn("slow");
                } else {
                    $(adder).fadeOut("slow");
                }

            });

            $(submitInput).click(function(e) {
                let selected = $(selectInput).find('option:selected:eq(0)')[0];
                if (selected === undefined || selected === null) {
                    selected = $(selectInput).find('option:eq(0)')[0];
                }
                const keyId = $(selected).attr("value");
                const keyName = $(selected).text();
                const value = $(valueInput).val();

                if (keyName === "---" || keyName === undefined || keyName === null || keyName === "")
                    return;

                if (keyId === undefined || keyId === null || keyId === "")
                    return;

                if ((value === undefined || value === null || value === "" || value === "0"))
                    return;

                const newItem = {
                    @(PropertyExtensions.GetJsonProperty<FeatureJsonValueViewModel>(x => x.Id)): keyId,
                    @(PropertyExtensions.GetJsonProperty<FeatureJsonValueViewModel>(x => x.Name)): keyName,
                    @(PropertyExtensions.GetJsonProperty<FeatureJsonValueViewModel>(x => x.Value)): value
                };

                addJson(jsonInput,
                    newItem,
                    obj => obj.@(PropertyExtensions.GetJsonProperty<FeatureJsonValueViewModel>(x => x.Id)) ===
                    newItem.@(PropertyExtensions.GetJsonProperty<FeatureJsonValueViewModel>(x => x.Id)));

                $(valueInput).val("");

            });

            $(document).on("click",
                `.${itemSelector}`,
                function(e) {
                    e.preventDefault();

                    const keyId = $(this).attr("data-id");
                    console.log("KeyId", keyId);

                    const jsonValue = $.parseJSON($(jsonInput).val());
                    console.log("JsonValue", jsonValue);

                    const index =
                        jsonValue.findIndex(prop => prop
                            .@(PropertyExtensions.GetJsonProperty<FeatureJsonValueViewModel>(x => x.Id)) ===
                            keyId);
                    console.log("Index", index);

                    removeJson(jsonInput, index);
                    $(this).remove();
                    console.log("Button Triggered to Remove Item", this);
                });

            $(jsonInput).trigger("change");

        });
    </script>
}