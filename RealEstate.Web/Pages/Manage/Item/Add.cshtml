@page
@model AddModel
@{
    var propertyFacilities = await FeatureService.FacilityListAsync().ConfigureAwait(false);
    var propertyFacilitiesList = propertyFacilities?.Select(x => new SelectListItem
    {
        Value = x.Id,
        Text = x.Name,
    }).SelectFirstItem();

    var itemCategories = await FeatureService.CategoryListAsync(CategoryTypeEnum.Item, false).ConfigureAwait(false);
    var itemCategoriesList = itemCategories?.Select(x => new SelectListItem
    {
        Value = x.Id,
        Text = x.Name,
    }).SelectFirstItem();

    var itemFeatures = await FeatureService.FeatureListAsync(FeatureTypeEnum.Item).ConfigureAwait(false);
    var itemFeaturesSelect = itemFeatures?.Select(x => new SelectListItem
    {
        Text = x.Name,
        Value = x.Id,
    }).SelectFirstItem();

    var propertyFeatures = await FeatureService.FeatureListAsync(FeatureTypeEnum.Property).ConfigureAwait(false);
    var propertyFeaturesList = propertyFeatures?.Select(x => new SelectListItem
    {
        Value = x.Id,
        Text = x.Name,
    }).SelectFirstItem();

    var districts = await LocationService.DistrictListAsync().ConfigureAwait(false);
    var districtsList = districts?.Select(x => new SelectListItem
    {
        Value = x.Id,
        Text = x.Name,
    }).SelectFirstItem();

    var propertyCategories = await FeatureService.CategoryListAsync(CategoryTypeEnum.Property, false).ConfigureAwait(false);
    var propertyCategoriesList = propertyCategories?.Select(x => new SelectListItem
    {
        Value = x.Id,
        Text = x.Name,
    }).SelectFirstItem();
}

<form method="post" class="col-12" id="myForm">
    <div class="widget">
        <widget-header title="@Model.PageTitle" />
        <section class="container-fluid">
            @*<div class="col-12">
                <ol class="text-right">
                    <li>تمامی مبالغ را اکیداً عددی، کامل، بصورت تومان و همچنین بدون کاما یا خط تیره وارد کنید. ( مثل 380000000 )</li>
                    <li>سال ساخت را، حتما به صورت عدد چهار رقمی ( مثلا 1398 ) وارد کنید.</li>
                    <li>قسمت مستاجر به این صورت وارد کنید: رضایی 09361231234</li>
                </ol>
            </div>*@
            <hr subject="@SharedLocalizer[SharedResource.Property]" />
            <div class="row justify-content-center align-items-center r8-panel">
                <div class="container-fluid">
                    <div class="row justify-content-center align-items-center">
                        <input asp-for="NewItem.Property.Id" type="hidden" />
                        <div class="col-12 col-lg">
                            <div class="input-wrapper">
                                <label class="control-label" asp-for="NewItem.Property.CategoryId"></label>
                                <select asp-for="NewItem.Property.CategoryId" asp-items="propertyCategoriesList" class="custom-select"></select>
                                @* <span class="text-danger" asp-validation-for="NewItem.Property.CategoryId"></span> *@
                            </div>
                        </div>
                        <div class="col-12 col-lg">
                            <div class="input-wrapper">
                                <label class="control-label" asp-for="NewItem.Property.DistrictId"></label>
                                <select asp-for="NewItem.Property.DistrictId" asp-items="districtsList" class="custom-select"></select>
                                @* <span class="text-danger" asp-validation-for="NewItem.Property.DistrictId"></span> *@
                            </div>
                        </div>
                        <div class="col-12 col-lg">
                            <div class="input-wrapper">
                                <label class="control-label" asp-for="NewItem.Property.Address"></label>
                                <input asp-for="NewItem.Property.Address" class="form-control" />
                                @* <span class="text-danger" asp-validation-for="NewItem.Property.Address"></span> *@
                            </div>
                        </div>
                    </div>
                    <div class="row justify-content-center align-items-center margin-bottomed hidden" id="property_similar">
                        <div class="col-12">
                            @SharedLocalizer[SharedResource.SimilarItems]
                            <div class="items"></div>
                        </div>
                    </div>
                    <div class="row justify-content-center align-items-center">
                        <input asp-for="NewItem.Property.Alley" type="hidden" />
                        <div class="col-12 col-lg">
                            <div class="input-wrapper">
                                <label class="control-label" asp-for="NewItem.Property.Number"></label>
                                <input asp-for="NewItem.Property.Number" class="form-control" />
                                @* <span class="text-danger" asp-validation-for="NewItem.Property.Number"></span> *@
                            </div>
                        </div>
                        <div class="col-12 col-lg">
                            <div class="input-wrapper">
                                <label class="control-label" asp-for="NewItem.Property.BuildingName"></label>
                                <input asp-for="NewItem.Property.BuildingName" class="form-control" />
                                @* <span class="text-danger" asp-validation-for="NewItem.Property.BuildingName"></span> *@
                            </div>
                        </div>
                        <div class="col-12 col-lg">
                            <div class="input-wrapper">
                                <label class="control-label" asp-for="NewItem.Property.Floor"></label>
                                <input asp-for="NewItem.Property.Floor" class="form-control" />
                                <span class="text-danger" asp-validation-for="NewItem.Property.Floor"></span>
                            </div>
                        </div>
                        <div class="col-12 col-lg">
                            <div class="input-wrapper">
                                <label class="control-label" asp-for="NewItem.Property.Flat"></label>
                                <input asp-for="NewItem.Property.Flat" class="form-control" />
                                @* <span class="text-danger" asp-validation-for="NewItem.Property.Floor"></span> *@
                            </div>
                        </div>
                    </div>

                    @if (propertyFeatures?.Any() == true)
                    {
                        <div class="row justify-content-center align-items-center itemShow adder">
                            <div class="col-12" id="property-features-wrapper">
                                <div class="input-wrapper">
                                    <input asp-for="NewItem.Property.PropertyFeaturesJson" />
                                    <label class="control-label" asp-for="NewItem.Property.PropertyFeaturesJson"></label>
                                    <select id="propertyFeatures-select" class="custom-select">
                                        @if (propertyFeaturesList?.Any() == true)
                                        {
                                            foreach (var item in propertyFeaturesList)
                                            {
                                                var featureException = FeaturesExceptions.GetException(item.Text);
                                                <option value="@item.Value" data-message="@featureException?.Message" data-regex="@featureException?.RegularExpression" data-unit="@featureException?.Unit">@item.Text</option>
                                            }
                                        }
                                    </select>
                                    <label class="control-label">@SharedLocalizer[SharedResource.Value]</label>
                                    <input class="form-control" id="propertyFeatureValue" />
                                    <span id="propertyFeatureCurrentUnit" class="mr-md-1"></span>
                                    <input type="button" id="addNewPropertyFeature" class="btn btn-warning btn-sm" value="@SharedLocalizer[SharedResource.Add]" />
                                </div>
                                <div class="items hidden"></div>
                            </div>
                        </div>
                    }
                    @if (propertyFacilities?.Any() == true)
                    {
                        <div class="row justify-content-center align-items-center itemShow adder">
                            <div class="col-12" id="property-facilities-wrapper">
                                <div class="input-wrapper">
                                    <input asp-for="NewItem.Property.PropertyFacilitiesJson" />
                                    <label class="control-label" asp-for="NewItem.Property.PropertyFacilitiesJson"></label>
                                    <select asp-items="propertyFacilitiesList" id="propertyFacility-select" class="custom-select"></select>
                                    <input type="button" id="addNewPropertyFacility" class="btn btn-warning btn-sm" value="@SharedLocalizer[SharedResource.Add]" />
                                </div>
                                <div class="items hidden"></div>
                            </div>
                        </div>
                    }
                </div>
            </div>
            <hr subject="@SharedLocalizer[SharedResource.Owner]" class="mt-4" />
            <div class="row justify-content-center align-content-center r8-panel">
                <input asp-for="NewItem.Property.Ownership.Dong" value="6" type="hidden" />
                <input asp-for="NewItem.Property.Ownership.Id" type="hidden" />

                <div class="container-fluid">
                    <div class="row justify-content-center align-items-center">
                        <div class="col-lg">
                            <div class="input-wrapper">

                                <label class="control-label" asp-for="NewItem.Property.Ownership.Name"></label>
                                <input asp-for="NewItem.Property.Ownership.Name" class="form-control" />
                                @* <span class="text-danger" asp-validation-for="NewItem.Property.Ownership.Name"></span> *@
                            </div>
                        </div>
                        <div class="col-lg">
                            <div class="input-wrapper">
                                <label class="control-label" asp-for="NewItem.Property.Ownership.Mobile"></label>
                                <input asp-for="NewItem.Property.Ownership.Mobile" class="form-control" />
                                @* <span class="text-danger" asp-validation-for="NewItem.Property.Ownership.Mobile"></span> *@
                            </div>
                        </div>
                    </div>
                    <input asp-for="NewItem.Property.Ownership.Phone" type="hidden" />
                    <input asp-for="NewItem.Property.Ownership.Address" type="hidden" />
                </div>
            </div>
            <hr subject="@SharedLocalizer[SharedResource.Item]" class="mt-4" />
            <div class="row justify-content-center align-items-center r8-panel">
                <input asp-for="NewItem.Id" />
                <div class="col-12">
                    <div class="row justify-content-center align-items-center">
                        <div class="col-12 col-lg">
                            <div class="input-wrapper">
                                <label asp-for="NewItem.CategoryId" class="control-label"></label>
                                <select asp-items="itemCategoriesList" asp-for="NewItem.CategoryId" class="custom-select"></select>
                                @* <span asp-validation-for="NewItem.CategoryId" class="text-danger"></span> *@
                            </div>
                        </div>
                        <div class="col-12 col-lg">
                            <div class="custom-control custom-switch" dir="rtl">
                                <input type="checkbox" class="custom-control-input" asp-for="@Model.NewItem.IsNegotiable" />
                                <label class="custom-control-label" asp-for="@Model.NewItem.IsNegotiable"></label>
                            </div>
                        </div>
                    </div>
                    @if (itemFeatures?.Any() == true)
                    {
                        <div class="row justify-content-center align-items-center itemShow adder">
                            <div class="col-12" id="features-wrapper">
                                <div class="input-wrapper">
                                    <input asp-for="NewItem.ItemFeaturesJson" />
                                    <label class="control-label">@SharedLocalizer[SharedResource.Features]</label>
                                    <select id="features-select" class="custom-select">
                                        @if (itemFeaturesSelect?.Any() == true)
                                        {
                                            foreach (var item in itemFeaturesSelect)
                                            {
                                                var featureException = FeaturesExceptions.GetException(item.Text);
                                                <option value="@item.Value" data-message="@featureException?.Message" data-regex="@featureException?.RegularExpression" data-unit="@featureException?.Unit">@item.Text</option>
                                            }
                                        }
                                    </select>
                                    <label class="control-label">@SharedLocalizer[SharedResource.Value]</label>
                                    <input class="form-control" name="NewItem.ItemFeatureValue" id="NewItem_ItemFeatureValue" />
                                    <span id="itemFeatureCurrentUnit" class="mr-md-1"></span>
                                    <input type="button" id="addNewFeature" class="btn btn-warning btn-sm" value="@SharedLocalizer[SharedResource.Add]" />
                                </div>
                                <div class="items hidden"></div>
                            </div>
                        </div>
                    }
                    <div class="row justify-content-center align-items-center">
                        <div class="col-12">
                            <div class="input-wrapper">
                                <label asp-for="NewItem.Description" class="control-label"></label>
                                <textarea asp-for="NewItem.Description" class="form-control" rows="3"></textarea>
                                @* <span asp-validation-for="NewItem.Description" class="text-danger"></span> *@
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </section>
        <footer>
            <submit full-width="true" />
            <status>
                @Html.Raw(Model.Status)
            </status>
        </footer>
    </div>
</form>

@section Scripts
{
    <script>

        var propertyChanged = true;

        $(document).ready(function() {

            const similars = $("#property_similar");
            const items = $(".items", similars);

            const status = $("#propertyMessage");
            const checkProperty = $("#NewItem_Property_Check");
            const propertyCategoryId =
                $("#@nameof(Model.NewItem)_@nameof(Model.NewItem.Property)_@nameof(Model.NewItem.Property.CategoryId)");
            const propertyDistrictId =
                $("#@nameof(Model.NewItem)_@nameof(Model.NewItem.Property)_@nameof(Model.NewItem.Property.DistrictId)");
            const propertyStreet =
                $("#@nameof(Model.NewItem)_@nameof(Model.NewItem.Property)_@nameof(Model.NewItem.Property.Address)");

            $(checkProperty).click(function(e) {
                if ($(form)[0].checkValidity()) {

                    $(propertyCategoryId).valid();
                    $(propertyDistrictId).valid();
                    $(propertyStreet).valid();

                    const selectedDistrictId = $(propertyDistrictId).val();
                    const selectedCategoryId = $(propertyCategoryId).val();

                    const street = $(propertyStreet).val();
                    const district = $(`option[value='${selectedDistrictId}']`, propertyDistrictId).html();
                    const category = $(`option[value='${selectedCategoryId}']`, propertyCategoryId).html();

                    const model = {
                        district: district,
                        category: category,
                        street: street
                    };
                    $.get("@Url.Action("ItemAsync", "Search")",
                        model,
                        function(response) {
                            console.log(response);
                            if (response !== null && response.length > 0) {
                                $(items).empty();

                                $.each(response,
                                    (key, property) => {

                                        const propertyId =
                                            property
                                                .@(PropertyExtensions.GetJsonProperty<PropertyJsonViewModel>(x => x.Id));
                                        const propertyCategory =
                                            property
                                                .@(PropertyExtensions.GetJsonProperty<PropertyJsonViewModel>(x => x.Category));
                                        const propertyDistrict =
                                            property
                                                .@(PropertyExtensions.GetJsonProperty<PropertyJsonViewModel>(x => x.District));
                                        const propertyAddress =
                                            property
                                                .@(PropertyExtensions.GetJsonProperty<PropertyJsonViewModel>(x => x.Address));

                                        const anchor = document.createElement("a");
                                        $(anchor).attr("href", "#");
                                        $(anchor).attr("data-id", propertyId);
                                        $(anchor).addClass(selector);

                                        const finalString = `@Html.Raw(SharedLocalizer["District"]): ${propertyDistrict
                                            } ، @Html.Raw(SharedLocalizer["Category"]): ${propertyCategory
                                            } ، @Html.Raw(SharedLocalizer["Address"]): ${propertyAddress}`;
                                        const nameElement = document.createElement("span");
                                        $(nameElement).html(finalString);

                                        $(anchor).append(nameElement);
                                        $(items).append(anchor);
                                    });

                                $(detail).removeClass("hidden");
                                $(similars).removeClass("hidden");
                            } else {
                                $(detail).removeClass("hidden");
                                $(similars).addClass("hidden");
                            }
                            propertyChanged = false;

                        });
                }
            });

        });
    </script>
    <script>
        $(document).ready(function() {

            const jsonInput =
                $(
                    "#@nameof(Model.NewItem)_@nameof(Model.NewItem.Property)_@nameof(Model.NewItem.Property.PropertyFeaturesJson)");
            const selectInput = $("#propertyFeatures-select");
            const wrapperClass = $("#property-features-wrapper");
            const submitInput = $("#addNewPropertyFeature");
            const valueInput = $("#propertyFeatureValue");
            const itemSelector = "property-feature-item";
            const unit = $("#propertyFeatureCurrentUnit");

            $(valueInput).on("change paste keyup input propertychange",
                function(e) {
                    const pattern = $(this).attr("regex-pattern");
                    const regex = new RegExp(pattern);
                    const text = $(this).val();
                    const matches = text !== "" && text !== undefined && regex.test(text);
                    if (!matches) {
                        $(this).addClass("input-validation-error");
                        $(this).removeClass("valid");
                    } else {
                        $(this).removeClass("input-validation-error");
                        $(this).addClass("valid");
                    }
                });

            $(selectInput).on("change",
                function(e) {
                    const optionSelected = $("option:selected", this);
                    $(unit).text(optionSelected.attr("data-unit"));
                    const message = optionSelected.attr("data-message");
                    $(valueInput).attr("data-original-title", message);
                    $(valueInput).attr("title", message);
                    $(valueInput).attr("data-placement", "bottom");
                    $(valueInput).attr("regex-pattern", optionSelected.attr("data-regex"));
                    $(valueInput).tooltip();
                    $(valueInput).trigger("change");
                });

            $(jsonInput).change(function() {

                const adder = $("> .adder", wrapperClass);
                const items = $("> .items", wrapperClass);
                $(items).empty();

                const json = $(jsonInput).val();
                if (json === "" || json === null) {
                    $(jsonInput).val("[]");
                }
                const jsonObject = $.parseJSON(json === "" ? "[]" : json);

                if (jsonObject.length > 0) {
                    $(items).removeClass("hidden");
                } else {
                    $(items).addClass("hidden");
                }

                $.each(jsonObject,
                    (index, item) => {

                        const id = item.@(PropertyExtensions.GetJsonProperty<FeatureJsonValueViewModel>(x => x.Id));
                        const name = item
                            .@(PropertyExtensions.GetJsonProperty<FeatureJsonValueViewModel>(x => x.Name));
                        var value = item
                            .@(PropertyExtensions.GetJsonProperty<FeatureJsonValueViewModel>(x => x.Value));

                        const anchor = document.createElement("a");
                        $(anchor).attr("href", "#");
                        $(anchor).attr("data-id", id);
                        $(anchor).attr("data-original-value", value);
                        $(anchor).addClass(itemSelector);

                        const nameElement = document.createElement("span");
                        const dataunit = $(`option[value="${id}"]`, selectInput)[0];
                        console.log(dataunit);
                        const unittt = $(dataunit).attr("data-unit");
                        var finalName = `${name}: `;
                        if (value != null && value !== "")
                            finalName = `<b class="text-black-50">${finalName}</b>${value} ${unittt}`;

                        $(nameElement).html(finalName);

                        $(anchor).append(nameElement);
                        $(items).append(anchor);

                    });

                $.each(selectInput.children(":not([value='---'])"),
                    (index, item) => {
                        const id = $(item).val();
                        const i = jsonObject.findIndex(
                            obj => obj.@(PropertyExtensions.GetJsonProperty<FeatureJsonValueViewModel>(x => x.Id)) ===
                            id);
                        if (i >= 0) {
                            $(item).addClass("hidden");
                        } else {
                            $(item).removeClass("hidden");
                        }

                    });

                const availableItems = $('option:not(.hidden):not([value=""])', selectInput);
                console.log("Available items", availableItems);
                if ($(availableItems).length > 0) {
                    $('option:not(.hidden):eq(0)', selectInput).prop('selected', true);
                    $(adder).fadeIn("slow");
                } else {
                    $(adder).fadeOut("slow");
                }

            });

            $(submitInput).click(function(e) {
                let selected = $(selectInput).find('option:selected:eq(0)')[0];
                if (selected === undefined || selected === null) {
                    selected = $(selectInput).find('option:eq(0)')[0];
                }

                $(valueInput).trigger("change");

                const keyId = $(selected).attr("value");
                const keyName = $(selected).text();
                const value = $(valueInput).val();
                const matches = $(valueInput).hasClass("valid");

                if (!matches) {
                    $(valueInput).focus();
                    $(valueInput).trigger("change");
                    console.log(value);
                    return;
                }

                if (keyName === "---" || keyName === undefined || keyName === null || keyName === "")
                    return;

                if (keyId === undefined || keyId === null || keyId === "")
                    return;

                if ((value === undefined || value === null || value === "" || value === "0"))
                    return;

                const newItem = {
                    @(PropertyExtensions.GetJsonProperty<FeatureJsonValueViewModel>(x => x.Id)): keyId,
                    @(PropertyExtensions.GetJsonProperty<FeatureJsonValueViewModel>(x => x.Name)): keyName,
                    @(PropertyExtensions.GetJsonProperty<FeatureJsonValueViewModel>(x => x.Value)): value
                };

                addJson(jsonInput,
                    newItem,
                    obj => obj.@(PropertyExtensions.GetJsonProperty<FeatureJsonValueViewModel>(x => x.Id)) ===
                    newItem.@(PropertyExtensions.GetJsonProperty<FeatureJsonValueViewModel>(x => x.Id)));

                $(valueInput).val("");
                $(selectInput).trigger("change");

            });

            $(document).on("click",
                `.${itemSelector}`,
                function(e) {
                    e.preventDefault();

                    const keyId = $(this).attr("data-id");
                    console.log("KeyId", keyId);

                    const jsonValue = $.parseJSON($(jsonInput).val());
                    console.log("JsonValue", jsonValue);

                    const index =
                        jsonValue.findIndex(prop => prop
                            .@(PropertyExtensions.GetJsonProperty<FeatureJsonValueViewModel>(x => x.Id)) ===
                            keyId);
                    console.log("Index", index);

                    const featureId = $(this).attr("data-id");
                    const featureValue = $(this).attr("data-original-value");
                    removeJson(jsonInput, index);
                    $(this).remove();
                    if ($(valueInput).val().length === 0) {
                        $(valueInput).val(featureValue);
                        $(`option[value='${featureId}']`, selectInput).prop('selected', true);
                        $(selectInput).trigger("change");
                    }
                    console.log("Button Triggered to Remove Item", this);
                });

            $(jsonInput).trigger("change");
            $(selectInput).trigger("change");

        });
    </script>
    <script>
        $(document).ready(function() {

            const jsonInput =
                $("#@nameof(Model.NewItem)_@nameof(Model.NewItem.Property)_@nameof(Model.NewItem.Property.PropertyFacilitiesJson)");
            const selectInput = $("#propertyFacility-select");
            const wrapperClass = $("#property-facilities-wrapper");
            const submitInput = $("#addNewPropertyFacility");
            const itemSelector = "property-facility-item";

            $(jsonInput).change(function() {

                const adder = $("> .adder", wrapperClass);
                const items = $("> .items", wrapperClass);
                $(items).empty();

                const json = $(jsonInput).val();
                if (json === "" || json === null) {
                    $(jsonInput).val("[]");
                }
                const jsonObject = $.parseJSON(json === "" ? "[]" : json);

                if (jsonObject.length > 0) {
                    $(items).removeClass("hidden");
                } else {
                    $(items).addClass("hidden");
                }

                $.each(jsonObject,
                    (index, item) => {
                        const id = item
                            .@(PropertyExtensions.GetJsonProperty<FacilityJsonViewModel>(x => x.Id));
                        const name = item
                            .@(PropertyExtensions.GetJsonProperty<FacilityJsonViewModel>(x => x.Name));

                        const anchor = document.createElement("a");
                        $(anchor).attr("href", "#");
                        $(anchor).attr("data-id", id);
                        $(anchor).addClass(itemSelector);
//                        $(anchor).attr("data-confirm", "@Html.Raw(SharedLocalizer["AreYouSureToDoThisRequest"])");

                        const nameElement = document.createElement("span");
                        $(nameElement).html(name);

                        $(anchor).append(nameElement);
                        $(items).append(anchor);

                    });

                $.each(selectInput.children(":not([value='---'])"),
                    (index, item) => {
                        const id = $(item).val();
                        const i = jsonObject.findIndex(
                            obj => obj.@(PropertyExtensions.GetJsonProperty<FacilityJsonViewModel>(x => x.Id)) ===
                            id);
                        if (i >= 0) {
                            $(item).addClass("hidden");
                        } else {
                            $(item).removeClass("hidden");
                        }

                    });

                const availableItems = $('option:not(.hidden):not([value=""])', selectInput);
                console.log("Available items", availableItems);
                if ($(availableItems).length > 0) {
                    $('option:not(.hidden):eq(0)', selectInput).prop('selected', true);
                    $(adder).fadeIn("slow");
                } else {
                    $(adder).fadeOut("slow");
                }

            });

            $(submitInput).click(function(e) {
                let selected = $(selectInput).find('option:selected:not([value="---"]):eq(0)')[0];
                if (selected === undefined || selected === null) {
                    selected = $(selectInput).find('option:eq(0)')[0];
                }
                const keyId = $(selected).attr("value");
                const keyName = $(selected).text();

                if (keyName === "---")
                    return;

                if (keyId === undefined || keyId === null)
                    return;

                const newItem = {
                    @(PropertyExtensions.GetJsonProperty<FacilityJsonViewModel>(x => x.Id)): keyId,
                    @(PropertyExtensions.GetJsonProperty<FacilityJsonViewModel>(x => x.Name)): keyName
                };

                addJson(jsonInput,
                    newItem,
                    obj => obj.@(PropertyExtensions.GetJsonProperty<FacilityJsonViewModel>(x => x.Name)) ===
                    newItem.@(PropertyExtensions.GetJsonProperty<FacilityJsonViewModel>(x => x.Name)));

            });

            $(document).on("click",
                `.${itemSelector}`,
                function(e) {
                    const keyId = $(this).attr("data-id");
                    console.log("KeyId", keyId);

                    const jsonValue = $.parseJSON($(jsonInput).val());
                    console.log("JsonValue", jsonValue);

                    const index =
                        jsonValue.findIndex(prop => prop
                            .@(PropertyExtensions.GetJsonProperty<FacilityJsonViewModel>(x => x.Name)) ===
                            keyId);
                    console.log("Index", index);

                    removeJson(jsonInput, index);
                    $(this).remove();
                    console.log("Button Triggered to Remove Item", this);
                });

            $(jsonInput).trigger("change");

        });
    </script>
    <script>
        $(document).ready(function() {

            const jsonInput = $("#@nameof(Model.NewItem)_@nameof(Model.NewItem.ItemFeaturesJson)");
            const selectInput = $("#features-select");
            const wrapperClass = $("#features-wrapper");
            const submitInput = $("#addNewFeature");
            const valueInput = $("#NewItem_ItemFeatureValue");
            const itemSelector = "feature-item";
            const unit = $("#itemFeatureCurrentUnit");

            $(valueInput).on("change paste keyup input propertychange",
                function(e) {
                    const pattern = $(this).attr("regex-pattern");
                    const regex = new RegExp(pattern);
                    const text = $(this).val();
                    const matches = text !== "" && text !== undefined && regex.test(text);
                    if (!matches) {
                        $(this).addClass("input-validation-error");
                        $(this).removeClass("valid");
                    } else {
                        $(this).removeClass("input-validation-error");
                        $(this).addClass("valid");
                    }
                });

            $(selectInput).on("change",
                function(e) {
                    const optionSelected = $("option:selected", this);
                    $(unit).text(optionSelected.attr("data-unit"));
                    const message = optionSelected.attr("data-message");
                    $(valueInput).attr("data-original-title", message);
                    $(valueInput).attr("title", message);
                    $(valueInput).attr("data-placement", "bottom");
                    $(valueInput).attr("regex-pattern", optionSelected.attr("data-regex"));
                    $(valueInput).tooltip();
                    $(valueInput).trigger("change");
                });

            $(jsonInput).change(function() {

                const adder = $("> .adder", wrapperClass);
                const items = $("> .items", wrapperClass);
                $(items).empty();

                const json = $(jsonInput).val();
                if (json === "" || json === null) {
                    $(jsonInput).val("[]");
                }
                const jsonObject = $.parseJSON(json === "" ? "[]" : json);

                if (jsonObject.length > 0) {
                    $(items).removeClass("hidden");
                } else {
                    $(items).addClass("hidden");
                }

                $.each(jsonObject,
                    (index, item) => {

                        const id = item.@(PropertyExtensions.GetJsonProperty<FeatureJsonValueViewModel>(x => x.Id));
                        const name = item
                            .@(PropertyExtensions.GetJsonProperty<FeatureJsonValueViewModel>(x => x.Name));
                        var value = item
                            .@(PropertyExtensions.GetJsonProperty<FeatureJsonValueViewModel>(x => x.Value));

                        const anchor = document.createElement("a");
                        $(anchor).attr("href", "#");
                        $(anchor).attr("data-id", id);
                        $(anchor).attr("data-original-value", value);
                        $(anchor).addClass(itemSelector);

                        const nameElement = document.createElement("span");
                        const dataunit = $(`option[value="${id}"]`, selectInput)[0];
                        console.log(dataunit);
                        const unittt = $(dataunit).attr("data-unit");
                        if (unittt === "تومان") {
//                            value = value.replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                            value = wordifyfa(parseFloat(value), 0);

                        }
                        var finalName = `${name}: `;
                        if (value != null && value !== "")
                            finalName = `<b class="text-black-50">${finalName}</b>${value} ${unittt}`;

                        $(nameElement).html(finalName);

                        $(anchor).append(nameElement);
                        $(items).append(anchor);

                    });

                $.each(selectInput.children(":not([value='---'])"),
                    (index, item) => {
                        const id = $(item).val();
                        const i = jsonObject.findIndex(
                            obj => obj.@(PropertyExtensions.GetJsonProperty<FeatureJsonValueViewModel>(x => x.Id)) ===
                            id);
                        if (i >= 0) {
                            $(item).addClass("hidden");
                        } else {
                            $(item).removeClass("hidden");
                        }

                    });

                const availableItems = $('option:not(.hidden):not([value=""])', selectInput);
                console.log("Available items", availableItems);
                if ($(availableItems).length > 0) {
                    $('option:not(.hidden):eq(0)', selectInput).prop('selected', true);
                    $(adder).fadeIn("slow");
                } else {
                    $(adder).fadeOut("slow");
                }

            });

            $(submitInput).click(function(e) {
                let selected = $(selectInput).find('option:selected:eq(0)')[0];
                if (selected === undefined || selected === null) {
                    selected = $(selectInput).find('option:eq(0)')[0];
                }

                $(valueInput).trigger("change");

                const keyId = $(selected).attr("value");
                const keyName = $(selected).text();
                const value = $(valueInput).val();
                const matches = $(valueInput).hasClass("valid");

                if (!matches) {
                    $(valueInput).focus();
                    $(valueInput).trigger("change");
                    console.log(value);
                    return;
                }

                if (keyName === "---" || keyName === undefined || keyName === null || keyName === "")
                    return;

                if (keyId === undefined || keyId === null || keyId === "")
                    return;

                if ((value === undefined || value === null || value === "" || value === "0"))
                    return;

                const newItem = {
                    @(PropertyExtensions.GetJsonProperty<FeatureJsonValueViewModel>(x => x.Id)): keyId,
                    @(PropertyExtensions.GetJsonProperty<FeatureJsonValueViewModel>(x => x.Name)): keyName,
                    @(PropertyExtensions.GetJsonProperty<FeatureJsonValueViewModel>(x => x.Value)): value
                };

                addJson(jsonInput,
                    newItem,
                    obj => obj.@(PropertyExtensions.GetJsonProperty<FeatureJsonValueViewModel>(x => x.Id)) ===
                    newItem.@(PropertyExtensions.GetJsonProperty<FeatureJsonValueViewModel>(x => x.Id)));

                $(valueInput).val("");
                $(selectInput).trigger("change");
            });

            $(document).on("click",
                `.${itemSelector}`,
                function(e) {
                    e.preventDefault();

                    const keyId = $(this).attr("data-id");
                    console.log("KeyId", keyId);

                    const jsonValue = $.parseJSON($(jsonInput).val());
                    console.log("JsonValue", jsonValue);

                    const index =
                        jsonValue.findIndex(prop => prop
                            .@(PropertyExtensions.GetJsonProperty<FeatureJsonValueViewModel>(x => x.Id)) ===
                            keyId);
                    console.log("Index", index);

                    const featureId = $(this).attr("data-id");
                    const featureValue = $(this).attr("data-original-value");
                    removeJson(jsonInput, index);
                    $(this).remove();
                    if ($(valueInput).val().length === 0) {
                        $(valueInput).val(featureValue);
                        $(`option[value='${featureId}']`, selectInput).prop('selected', true);
                        $(selectInput).trigger("change");
                    }

                    console.log("Button Triggered to Remove Item", this);
                });

            $(jsonInput).trigger("change");
            $(selectInput).trigger("change");
        });
    </script>
}